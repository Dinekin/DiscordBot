// src/events/channelUpdate.js - zdarzenie aktualizacji kana≈Çu
const { Events, EmbedBuilder, AuditLogEvent, ChannelType } = require('discord.js');
const Guild = require('../models/Guild');
const MessageLog = require('../models/MessageLog');
const logger = require('../utils/logger');

module.exports = {
  name: Events.ChannelUpdate,
  async execute(oldChannel, newChannel) {
    try {
      // Pomijamy kana≈Çy DM
      if (!newChannel.guild) return;
      
      // Sprawd≈∫ czy funkcja logowania jest w≈ÇƒÖczona na serwerze
      const guildSettings = await Guild.findOne({ guildId: newChannel.guild.id });
      
      // Je≈õli nie ma guildSettings lub funkcja nie jest w≈ÇƒÖczona, zako≈Ñcz
      if (!guildSettings || !guildSettings.modules?.messageLog) return;
      
      // Sprawd≈∫, czy mamy logowaƒá tylko usuniƒôte wiadomo≈õci
      if (guildSettings.logDeletedOnly) {
        // Je≈õli tak, nie logujemy aktualizacji kana≈Ç√≥w
        return;
      }
      
      // Sprawd≈∫ czy kana≈Ç log√≥w istnieje
      if (!guildSettings.messageLogChannel) return;
      
      const logChannel = await newChannel.guild.channels.fetch(guildSettings.messageLogChannel).catch(() => null);
      if (!logChannel || logChannel.id === newChannel.id) return;
      
      // Przygotuj listƒô zmian, kt√≥re wystƒÖpi≈Çy
      const changes = [];
      let importantChange = false;
      const isForum = newChannel.type === ChannelType.GuildForum;
      
      // Sprawd≈∫ czy zmieni≈Ça siƒô nazwa
      if (oldChannel.name !== newChannel.name) {
        changes.push({
          name: 'üìù Nazwa',
          value: `**Przed:** ${oldChannel.name}\n**Po:** ${newChannel.name}`,
          inline: false
        });
        importantChange = true;
      }
      
      // Sprawd≈∫ czy zmieni≈Ç siƒô temat/opis
      if (oldChannel.topic !== newChannel.topic) {
        const oldTopic = oldChannel.topic || '*Brak*';
        const newTopic = newChannel.topic || '*Brak*';
        
        changes.push({
          name: isForum ? 'üìã Opis forum' : 'üìù Temat kana≈Çu',
          value: `**Przed:** ${oldTopic.length > 100 ? oldTopic.substring(0, 97) + '...' : oldTopic}\n**Po:** ${newTopic.length > 100 ? newTopic.substring(0, 97) + '...' : newTopic}`,
          inline: false
        });
        importantChange = true;
      }
      
      // Sprawd≈∫ czy zmieni≈Ça siƒô kategoria nadrzƒôdna
      if (oldChannel.parentId !== newChannel.parentId) {
        let oldParentName = 'Brak (kana≈Ç g≈Ç√≥wny)';
        let newParentName = 'Brak (kana≈Ç g≈Ç√≥wny)';
        
        if (oldChannel.parentId) {
          const oldParent = newChannel.guild.channels.cache.get(oldChannel.parentId);
          if (oldParent) oldParentName = `${oldParent.name} (${oldParent.id})`;
        }
        
        if (newChannel.parentId) {
          const newParent = newChannel.guild.channels.cache.get(newChannel.parentId);
          if (newParent) newParentName = `${newParent.name} (${newParent.id})`;
        }
        
        changes.push({
          name: 'üìÅ Kategoria',
          value: `**Przed:** ${oldParentName}\n**Po:** ${newParentName}`,
          inline: false
        });
        importantChange = true;
      }
      
      // Sprawd≈∫ czy zmieni≈Çy siƒô uprawnienia (podstawowe sprawdzenie)
      if (oldChannel.permissionOverwrites.cache.size !== newChannel.permissionOverwrites.cache.size) {
        changes.push({
          name: 'üîê Uprawnienia',
          value: `Zmieniono liczbƒô nadpisa≈Ñ uprawnie≈Ñ: ${oldChannel.permissionOverwrites.cache.size} ‚Üí ${newChannel.permissionOverwrites.cache.size}`,
          inline: false
        });
      }
      
      // Sprawdzenia specyficzne dla for√≥w
      if (isForum) {
        // Sprawd≈∫ zmiany w dostƒôpnych tagach
        const oldTagsCount = oldChannel.availableTags?.length || 0;
        const newTagsCount = newChannel.availableTags?.length || 0;
        
        if (oldTagsCount !== newTagsCount) {
          changes.push({
            name: 'üè∑Ô∏è Tagi forum',
            value: `Zmieniono liczbƒô dostƒôpnych tag√≥w: ${oldTagsCount} ‚Üí ${newTagsCount}`,
            inline: true
          });
        } else if (oldChannel.availableTags && newChannel.availableTags) {
          // Sprawd≈∫ czy zmieni≈Çy siƒô nazwy/emoji tag√≥w
          const oldTagNames = oldChannel.availableTags.map(t => t.name).sort().join(', ');
          const newTagNames = newChannel.availableTags.map(t => t.name).sort().join(', ');
          
          if (oldTagNames !== newTagNames) {
            changes.push({
              name: 'üè∑Ô∏è Nazwy tag√≥w',
              value: 'Zmieniono nazwy lub kolejno≈õƒá tag√≥w forum',
              inline: true
            });
          }
        }
        
        // Sprawd≈∫ zmiany w domy≈õlnej reakcji
        const oldReaction = oldChannel.defaultReactionEmoji;
        const newReaction = newChannel.defaultReactionEmoji;
        
        if (oldReaction?.id !== newReaction?.id || oldReaction?.name !== newReaction?.name) {
          let oldEmoji = 'Brak';
          let newEmoji = 'Brak';
          
          if (oldReaction) {
            oldEmoji = oldReaction.id
              ? `<:${oldReaction.name}:${oldReaction.id}>`
              : oldReaction.name;
          }
          
          if (newReaction) {
            newEmoji = newReaction.id
              ? `<:${newReaction.name}:${newReaction.id}>`
              : newReaction.name;
          }
          
          changes.push({
            name: 'üëç Domy≈õlna reakcja',
            value: `**Przed:** ${oldEmoji}\n**Po:** ${newEmoji}`,
            inline: true
          });
        }
        
        // Sprawd≈∫ zmiany w domy≈õlnej auto-archiwizacji
        if (oldChannel.defaultAutoArchiveDuration !== newChannel.defaultAutoArchiveDuration) {
          const oldDuration = formatArchiveDuration(oldChannel.defaultAutoArchiveDuration);
          const newDuration = formatArchiveDuration(newChannel.defaultAutoArchiveDuration);
          
          changes.push({
            name: 'üìÅ Domy≈õlna auto-archiwizacja',
            value: `**Przed:** ${oldDuration}\n**Po:** ${newDuration}`,
            inline: true
          });
        }
        
        // Sprawd≈∫ zmiany w domy≈õlnym slowmode wƒÖtk√≥w
        if (oldChannel.defaultThreadRateLimitPerUser !== newChannel.defaultThreadRateLimitPerUser) {
          const oldRate = oldChannel.defaultThreadRateLimitPerUser || 0;
          const newRate = newChannel.defaultThreadRateLimitPerUser || 0;
          
          changes.push({
            name: 'üêå Domy≈õlny slowmode wƒÖtk√≥w',
            value: `**Przed:** ${oldRate === 0 ? 'Wy≈ÇƒÖczony' : `${oldRate} sekund`}\n**Po:** ${newRate === 0 ? 'Wy≈ÇƒÖczony' : `${newRate} sekund`}`,
            inline: true
          });
        }
        
        // Sprawd≈∫ zmiany w sortowaniu
        if (oldChannel.defaultSortOrder !== newChannel.defaultSortOrder) {
          const sortTexts = {
            0: 'Najnowsza aktywno≈õƒá',
            1: 'Data utworzenia'
          };
          
          const oldSort = sortTexts[oldChannel.defaultSortOrder] || `Nieznane (${oldChannel.defaultSortOrder})`;
          const newSort = sortTexts[newChannel.defaultSortOrder] || `Nieznane (${newChannel.defaultSortOrder})`;
          
          changes.push({
            name: 'üìä Domy≈õlne sortowanie',
            value: `**Przed:** ${oldSort}\n**Po:** ${newSort}`,
            inline: true
          });
        }
        
        // Sprawd≈∫ zmiany w layoutcie forum
        if (oldChannel.defaultForumLayout !== newChannel.defaultForumLayout) {
          const layoutTexts = {
            0: 'Niespecyfikowany',
            1: 'Widok listy',
            2: 'Widok galerii'
          };
          
          const oldLayout = layoutTexts[oldChannel.defaultForumLayout] || `Nieznany (${oldChannel.defaultForumLayout})`;
          const newLayout = layoutTexts[newChannel.defaultForumLayout] || `Nieznany (${newChannel.defaultForumLayout})`;
          
          changes.push({
            name: 'üñºÔ∏è Layout forum',
            value: `**Przed:** ${oldLayout}\n**Po:** ${newLayout}`,
            inline: true
          });
        }
      }
      
      // Sprawdzenia dla kana≈Ç√≥w tekstowych i og≈Çosze≈Ñ
      if (newChannel.type === ChannelType.GuildText || newChannel.type === ChannelType.GuildAnnouncement) {
        // Sprawd≈∫ czy zmieni≈Ço siƒô ograniczenie szybko≈õci
        if (oldChannel.rateLimitPerUser !== newChannel.rateLimitPerUser) {
          const oldLimit = oldChannel.rateLimitPerUser ? `${oldChannel.rateLimitPerUser} sekund` : 'Brak';
          const newLimit = newChannel.rateLimitPerUser ? `${newChannel.rateLimitPerUser} sekund` : 'Brak';
          
          changes.push({
            name: 'üêå Slowmode',
            value: `**Przed:** ${oldLimit}\n**Po:** ${newLimit}`,
            inline: true
          });
        }
        
        // Sprawd≈∫ czy zmieni≈Ç siƒô status NSFW
        if (oldChannel.nsfw !== newChannel.nsfw) {
          changes.push({
            name: 'üîû NSFW',
            value: `**Przed:** ${oldChannel.nsfw ? 'Tak' : 'Nie'}\n**Po:** ${newChannel.nsfw ? 'Tak' : 'Nie'}`,
            inline: true
          });
        }
      }
      
      // Sprawdzenia dla kana≈Ç√≥w g≈Çosowych
      if (newChannel.type === ChannelType.GuildVoice || newChannel.type === ChannelType.GuildStageVoice) {
        // Sprawd≈∫ zmiany w limicie u≈ºytkownik√≥w
        if (oldChannel.userLimit !== newChannel.userLimit) {
          const oldLimit = oldChannel.userLimit === 0 ? 'Brak limitu' : oldChannel.userLimit.toString();
          const newLimit = newChannel.userLimit === 0 ? 'Brak limitu' : newChannel.userLimit.toString();
          
          changes.push({
            name: 'üë• Limit u≈ºytkownik√≥w',
            value: `**Przed:** ${oldLimit}\n**Po:** ${newLimit}`,
            inline: true
          });
        }
        
        // Sprawd≈∫ zmiany w bitrate
        if (oldChannel.bitrate !== newChannel.bitrate) {
          changes.push({
            name: 'üîä Bitrate',
            value: `**Przed:** ${oldChannel.bitrate / 1000} kbps\n**Po:** ${newChannel.bitrate / 1000} kbps`,
            inline: true
          });
        }
        
        // Sprawd≈∫ zmiany w regionie
        if (oldChannel.rtcRegion !== newChannel.rtcRegion) {
          const oldRegion = oldChannel.rtcRegion || 'Automatyczny';
          const newRegion = newChannel.rtcRegion || 'Automatyczny';
          
          changes.push({
            name: 'üåç Region g≈Çosowy',
            value: `**Przed:** ${oldRegion}\n**Po:** ${newRegion}`,
            inline: true
          });
        }
      }
      
      // Sprawd≈∫ czy zmieni≈Ça siƒô pozycja
      if (oldChannel.position !== newChannel.position) {
        changes.push({
          name: 'üìç Pozycja',
          value: `**Przed:** ${oldChannel.position}\n**Po:** ${newChannel.position}`,
          inline: true
        });
      }
      
      // Je≈õli nie wykryto zmian, zako≈Ñcz
      if (changes.length === 0) return;
      
      // Pobierz informacje z dziennika audytu
      let executor = null;
      let reason = "Nie podano powodu";
      
      try {
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        const auditLogs = await newChannel.guild.fetchAuditLogs({
          limit: 1,
          type: AuditLogEvent.ChannelUpdate
        });
        
        const channelLog = auditLogs.entries.first();
        
        if (channelLog && channelLog.target.id === newChannel.id) {
          executor = channelLog.executor;
          if (channelLog.reason) reason = channelLog.reason;
        }
      } catch (error) {
        logger.error(`B≈ÇƒÖd podczas pobierania dziennika audytu dla aktualizacji kana≈Çu: ${error.message}`);
      }
      
      // Okre≈õl typ kana≈Çu i kolor
      const channelTypeText = getChannelTypeText(newChannel.type);
      let embedColor = 0xF1C40F; // ≈ª√≥≈Çty dla zwyk≈Çych zmian
      if (isForum) embedColor = 0x9B59B6; // Fioletowy dla for√≥w
      else if (importantChange) embedColor = 0x3498DB; // Niebieski dla wa≈ºnych zmian
      
      // Przygotuj embed z informacjami o aktualizacji kana≈Çu
      const embed = new EmbedBuilder()
        .setTitle(`${isForum ? 'üóÇÔ∏è Zaktualizowano forum' : 'üìÅ Zaktualizowano kana≈Ç'}`)
        .setColor(embedColor)
        .setDescription(`**Kana≈Ç:** ${newChannel.name} (<#${newChannel.id}>)`)
        .addFields({ 
          name: 'üìã Typ', 
          value: channelTypeText,
          inline: true 
        })
        .setTimestamp()
        .setFooter({ text: `ID kana≈Çu: ${newChannel.id}` });
      
      // Dodaj wykryte zmiany
      changes.forEach(change => {
        embed.addFields(change);
      });
      
      if (executor) {
        embed.addFields({ 
          name: 'üë§ Zaktualizowany przez', 
          value: `${executor.tag} (${executor.id})`,
          inline: true 
        });
      }
      
      if (reason !== "Nie podano powodu") {
        embed.addFields({ 
          name: 'üìù Pow√≥d', 
          value: reason,
          inline: false 
        });
      }
      
      // Dodaj link do kana≈Çu
      embed.addFields({ 
        name: 'üîó Link', 
        value: `<#${newChannel.id}>`,
        inline: true 
      });
      
      // Dodaj szczeg√≥≈Çowe informacje o tagach forum je≈õli siƒô zmieni≈Çy
      if (isForum && newChannel.availableTags && newChannel.availableTags.length > 0) {
        const tagsDescription = newChannel.availableTags
          .map(tag => {
            let tagInfo = `‚Ä¢ **${tag.name}**`;
            if (tag.emoji) {
              const emojiText = tag.emoji.id 
                ? `<:${tag.emoji.name}:${tag.emoji.id}>` 
                : tag.emoji.name;
              tagInfo = `${emojiText} ${tagInfo}`;
            }
            if (tag.moderated) tagInfo += ' (moderowany)';
            return tagInfo;
          })
          .join('\n');
        
        if (tagsDescription.length <= 1024) {
          embed.addFields({ 
            name: `üè∑Ô∏è Aktualne tagi (${newChannel.availableTags.length})`, 
            value: tagsDescription,
            inline: false 
          });
        }
      }
      
      await logChannel.send({ embeds: [embed] });

      // Zapisz informacje o aktualizacji kana≈Çu do bazy danych
      await logChannelUpdateToDatabase(oldChannel, newChannel, changes, executor, reason);
    } catch (error) {
      logger.error(`B≈ÇƒÖd podczas logowania aktualizacji kana≈Çu: ${error.stack}`);
    }
  }
};

// Funkcja do zapisywania aktualizacji kana≈Çu do bazy danych
async function logChannelUpdateToDatabase(oldChannel, newChannel, changes, executor, reason) {
  try {
    // Znajd≈∫ lub utw√≥rz dokument MessageLog dla tego kana≈Çu
    let messageLog = await MessageLog.findOne({
      guildId: newChannel.guild.id,
      channelId: newChannel.id
    });

    if (!messageLog) {
      messageLog = new MessageLog({
        guildId: newChannel.guild.id,
        channelId: newChannel.id,
        messageId: `channel-update-${newChannel.id}-${Date.now()}`, // Unikalne ID dla aktualizacji kana≈Çu
        authorId: executor?.id || 'system',
        authorTag: executor?.tag || 'System',
        content: '',
        channelLogs: []
      });
    }

    // Dodaj log kana≈Çu z informacjami o zmianach
    const changeSummary = changes.map(change => `${change.name}: ${change.value.replace(/\*\*/g, '')}`).join('; ');

    messageLog.channelLogs.push({
      type: 'update',
      channelId: newChannel.id,
      channelName: newChannel.name,
      channelType: getChannelTypeText(newChannel.type),
      moderatorId: executor?.id,
      moderatorTag: executor?.tag,
      reason: reason,
      changes: changes.map(change => ({
        field: change.name,
        oldValue: change.value.split('\n')[0]?.replace(/\*\*Przed:\*\*/g, '').trim() || '',
        newValue: change.value.split('\n')[1]?.replace(/\*\*Po:\*\*/g, '').trim() || ''
      }))
    });

    await messageLog.save();
    logger.info(`Zapisano aktualizacjƒô kana≈Çu ${newChannel.name} w bazie danych`);
  } catch (error) {
    logger.error(`B≈ÇƒÖd podczas zapisywania aktualizacji kana≈Çu do bazy danych: ${error.stack}`);
  }
}

// Funkcja pomocnicza do t≈Çumaczenia typu kana≈Çu
function getChannelTypeText(type) {
  switch (type) {
    case ChannelType.GuildText: return 'Kana≈Ç tekstowy';
    case ChannelType.GuildVoice: return 'Kana≈Ç g≈Çosowy';
    case ChannelType.GuildCategory: return 'Kategoria';
    case ChannelType.GuildAnnouncement: return 'Kana≈Ç og≈Çosze≈Ñ';
    case ChannelType.AnnouncementThread: return 'WƒÖtek og≈Çosze≈Ñ';
    case ChannelType.PublicThread: return 'Publiczna nitka';
    case ChannelType.PrivateThread: return 'Prywatna nitka';
    case ChannelType.GuildStageVoice: return 'Kana≈Ç sceniczny';
    case ChannelType.GuildForum: return 'Forum';
    case ChannelType.GuildDirectory: return 'Katalog';
    default: return `Nieznany (${type})`;
  }
}

// Funkcja pomocnicza do formatowania czasu archiwizacji
function formatArchiveDuration(minutes) {
  if (!minutes) return 'Nieznany';
  
  if (minutes === 60) return '1 godzina';
  if (minutes === 1440) return '1 dzie≈Ñ';
  if (minutes === 4320) return '3 dni';
  if (minutes === 10080) return '1 tydzie≈Ñ';
  
  return `${minutes} minut`;
}
