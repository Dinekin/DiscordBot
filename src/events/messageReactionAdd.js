// src/events/messageReactionAdd.js - z ochronƒÖ przed automatycznym dodawaniem r√≥l czasowych
const { Events } = require('discord.js');
const ReactionRole = require('../models/ReactionRole');
const Guild = require('../models/Guild');
const { canAddAsTempRole } = require('../utils/checkExpiredRoles');
const logger = require('../utils/logger');

module.exports = {
  name: Events.MessageReactionAdd,
  async execute(reaction, user) {
    // Ignoruj reakcje od bot√≥w
    if (user.bot) return;
    
    try {
      logger.debug(`Reakcja otrzymana: ${user.tag} doda≈Ç emoji ${reaction.emoji.name || reaction.emoji.id} do wiadomo≈õci ${reaction.message.id}`);
      
      // Sprawd≈∫, czy reakcja jest czƒô≈õciowa i za≈Çaduj jƒÖ w ca≈Ço≈õci
      if (reaction.partial) {
        try {
          await reaction.fetch();
          logger.debug('Reakcja czƒô≈õciowa zosta≈Ça pobrana w ca≈Ço≈õci');
        } catch (error) {
          logger.error(`B≈ÇƒÖd podczas pobierania reakcji: ${error.message}`);
          return;
        }
      }
      
      // Pobierz informacje o serwerze
      const guildSettings = await Guild.findOne({ guildId: reaction.message.guildId });
      logger.debug(`Ustawienia serwera: ${JSON.stringify(guildSettings ? guildSettings.modules : 'brak')}`);
      
      // Sprawd≈∫ czy modu≈Ç reaction roles jest w≈ÇƒÖczony
      if (guildSettings && guildSettings.modules && guildSettings.modules.reactionRoles === false) {
        logger.debug('Modu≈Ç reaction roles jest wy≈ÇƒÖczony, przerywam');
        return;
      }
      
      // Znajd≈∫ reakcjƒô w bazie danych
      const reactionRole = await ReactionRole.findOne({ 
        guildId: reaction.message.guildId,
        messageId: reaction.message.id 
      });
      
      if (!reactionRole) {
        logger.debug(`Nie znaleziono konfiguracji reaction role dla wiadomo≈õci ${reaction.message.id}`);
        return;
      }
      
      logger.debug(`Znaleziono konfiguracjƒô: ${JSON.stringify(reactionRole)}`);
      
      // Sprawd≈∫, czy emoji jest w bazie danych
      const emojiIdentifier = reaction.emoji.id || reaction.emoji.name;
      logger.debug(`Szukam emoji: ${emojiIdentifier} w konfiguracji r√≥l`);
      
      // Wypisz wszystkie dostƒôpne emoji w konfiguracji
      logger.debug(`Dostƒôpne emoji w konfiguracji: ${reactionRole.roles.map(r => r.emoji).join(', ')}`);
      
      const roleInfo = reactionRole.roles.find(r => r.emoji === emojiIdentifier);
      
      if (!roleInfo) {
        logger.debug(`Nie znaleziono roli dla emoji ${emojiIdentifier}`);
        return;
      }
      
      logger.debug(`Znaleziono rolƒô: ${JSON.stringify(roleInfo)}`);
      
      // Dodaj rolƒô u≈ºytkownikowi
      const guild = reaction.message.guild;
      
      if (!guild) {
        logger.error('Nie mo≈ºna uzyskaƒá dostƒôpu do obiektu serwera');
        return;
      }
      
      try {
        const member = await guild.members.fetch(user.id);
        logger.debug(`Pobrano cz≈Çonka serwera: ${member.user.tag}`);
        
        // Pobierz rolƒô, aby sprawdziƒá czy istnieje
        const role = await guild.roles.fetch(roleInfo.roleId).catch(err => {
          logger.error(`Nie mo≈ºna znale≈∫ƒá roli ${roleInfo.roleId}: ${err.message}`);
          return null;
        });
        
        if (!role) {
          logger.error(`Rola o ID ${roleInfo.roleId} nie istnieje na serwerze`);
          return;
        }
        
        // WA≈ªNE: Sprawd≈∫ czy rola nie jest chroniona przed dodaniem jako czasowa
        if (!canAddAsTempRole(guild.id, user.id, role.id)) {
          logger.warn(`üö´ Reaction role: Blokujƒô dodanie chronionej roli ${role.name} u≈ºytkownikowi ${user.tag}`);
          // Usu≈Ñ reakcjƒô ≈ºeby u≈ºytkownik wiedzia≈Ç, ≈ºe nie mo≈ºe teraz otrzymaƒá tej roli
          try {
            await reaction.users.remove(user.id);
            logger.info(`Usuniƒôto reakcjƒô u≈ºytkownika ${user.tag} dla chronionej roli ${role.name}`);
          } catch (removeError) {
            logger.error(`Nie mo≈ºna usunƒÖƒá reakcji: ${removeError.message}`);
          }
          return;
        }
        
        // Sprawd≈∫, czy bot ma uprawnienia do zarzƒÖdzania rolami
        const botMember = guild.members.cache.get(guild.client.user.id);
        if (!botMember.permissions.has('ManageRoles')) {
          logger.error('Bot nie ma uprawnie≈Ñ do zarzƒÖdzania rolami');
          return;
        }
        
        // Sprawd≈∫, czy rola jest wy≈ºej w hierarchii ni≈º rola bota
        if (role.position >= botMember.roles.highest.position) {
          logger.error(`Rola ${role.name} jest wy≈ºej w hierarchii ni≈º najwy≈ºsza rola bota`);
          return;
        }
        
        // Dodaj rolƒô
        await member.roles.add(roleInfo.roleId);
        logger.info(`Dodano rolƒô ${role.name} u≈ºytkownikowi ${member.user.tag} przez reaction role`);
        
        // UWAGA: TU NIE DODAJEMY AUTOMATYCZNIE ROLI JAKO CZASOWEJ!
        // Je≈õli wcze≈õniej by≈Ça tutaj logika dodawania r√≥l jako czasowych, zosta≈Ça usuniƒôta
        
        // Sprawd≈∫, czy powiadomienia sƒÖ w≈ÇƒÖczone
        if (roleInfo.notificationEnabled && guildSettings && guildSettings.notificationChannel) {
          try {
            const notificationChannel = await guild.channels.fetch(guildSettings.notificationChannel);
            
            if (notificationChannel) {
              await notificationChannel.send(
                `U≈ºytkownik ${user} otrzyma≈Ç rolƒô ${role.name} poprzez reakcjƒô w kanale <#${reaction.message.channel.id}>`
              );
              logger.debug('Wys≈Çano powiadomienie o przyznaniu roli');
            } else {
              logger.warn(`Kana≈Ç powiadomie≈Ñ ${guildSettings.notificationChannel} nie istnieje`);
            }
          } catch (notifError) {
            logger.error(`B≈ÇƒÖd podczas wysy≈Çania powiadomienia: ${notifError.message}`);
          }
        }
      } catch (memberError) {
        logger.error(`B≈ÇƒÖd podczas pobierania cz≈Çonka serwera: ${memberError.message}`);
      }
    } catch (error) {
      logger.error(`Og√≥lny b≈ÇƒÖd podczas obs≈Çugi reakcji: ${error.stack}`);
    }
  },
};