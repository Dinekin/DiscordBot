// src/events/messageReactionAdd.js - naprawiona wersja z lepszym logowaniem
const { Events } = require('discord.js');
const ReactionRole = require('../models/ReactionRole');
const MessageLog = require('../models/MessageLog');
const Guild = require('../models/Guild');
const { canAddAsTempRole } = require('../utils/checkExpiredRoles');
const logger = require('../utils/logger');

module.exports = {
  name: Events.MessageReactionAdd,
  async execute(reaction, user) {
    // Ignoruj reakcje od bot√≥w
    if (user.bot) return;
    
    try {
      logger.debug(`Dodano reakcjƒô: ${user.tag} doda≈Ç emoji ${reaction.emoji.name || reaction.emoji.id} do wiadomo≈õci ${reaction.message.id}`);
      
      // Sprawd≈∫, czy reakcja jest czƒô≈õciowa i za≈Çaduj jƒÖ w ca≈Ço≈õci
      if (reaction.partial) {
        try {
          await reaction.fetch();
          logger.debug('Czƒô≈õciowa reakcja zosta≈Ça pobrana w ca≈Ço≈õci');
        } catch (error) {
          logger.error(`B≈ÇƒÖd podczas pobierania reakcji: ${error.message}`);
          return;
        }
      }

      // Sprawd≈∫, czy wiadomo≈õƒá jest czƒô≈õciowa i za≈Çaduj jƒÖ
      if (reaction.message.partial) {
        try {
          await reaction.message.fetch();
          logger.debug('Czƒô≈õciowa wiadomo≈õƒá zosta≈Ça pobrana w ca≈Ço≈õci');
        } catch (error) {
          logger.error(`B≈ÇƒÖd podczas pobierania wiadomo≈õci: ${error.message}`);
          return;
        }
      }

      // Pobierz ustawienia serwera
      const guildSettings = await Guild.findOne({ guildId: reaction.message.guildId });
      
      // === LOGOWANIE REAKCJI ===
      if (guildSettings && guildSettings.modules?.messageLog) {
        await logReactionAdd(reaction, user, guildSettings);
      } else {
        logger.debug(`Logowanie reakcji wy≈ÇƒÖczone lub brak ustawie≈Ñ serwera dla ${reaction.message.guildId}`);
      }
      
      // === SYSTEM R√ìL REAKCJI ===
      logger.debug(`Ustawienia serwera: ${JSON.stringify(guildSettings ? guildSettings.modules : 'brak')}`);
      
      // Sprawd≈∫ czy modu≈Ç reaction roles jest w≈ÇƒÖczony
      if (guildSettings && guildSettings.modules && guildSettings.modules.reactionRoles === false) {
        logger.debug('Modu≈Ç reaction roles jest wy≈ÇƒÖczony, przerywam obs≈Çugƒô r√≥l');
        return;
      }
      
      // Znajd≈∫ reakcjƒô w bazie danych
      const reactionRole = await ReactionRole.findOne({ 
        guildId: reaction.message.guildId,
        messageId: reaction.message.id 
      });
      
      if (!reactionRole) {
        logger.debug(`Nie znaleziono konfiguracji reaction role dla wiadomo≈õci ${reaction.message.id}`);
        return;
      }
      
      logger.debug(`Znaleziono konfiguracjƒô: ${JSON.stringify(reactionRole)}`);
      
      // Sprawd≈∫, czy emoji jest w bazie danych
      let emojiIdentifier;

      if (reaction.emoji.id) {
        // Dla niestandardowych emoji, skonstruuj pe≈Çny format
        emojiIdentifier = `<${reaction.emoji.animated ? 'a' : ''}:${reaction.emoji.name}:${reaction.emoji.id}>`;
      } else {
        // Dla standardowych emoji, u≈ºyj nazwy
        emojiIdentifier = reaction.emoji.name;
      }

      logger.debug(`Szukam emoji: ${emojiIdentifier} w konfiguracji r√≥l`);

      // Wypisz wszystkie dostƒôpne emoji w konfiguracji
      logger.debug(`Dostƒôpne emoji w konfiguracji: ${reactionRole.roles.map(r => r.emoji).join(', ')}`);

      const roleInfo = reactionRole.roles.find(r => r.emoji === emojiIdentifier);
      
      if (!roleInfo) {
        logger.debug(`Nie znaleziono roli dla emoji ${emojiIdentifier}`);
        return;
      }
      
      logger.debug(`Znaleziono rolƒô: ${JSON.stringify(roleInfo)}`);
      
      // Dodaj rolƒô u≈ºytkownikowi
      const guild = reaction.message.guild;
      
      if (!guild) {
        logger.error('Nie mo≈ºna uzyskaƒá dostƒôpu do obiektu serwera');
        return;
      }
      
      try {
        const member = await guild.members.fetch(user.id);
        logger.debug(`Pobrano cz≈Çonka serwera: ${member.user.tag}`);
        
        // Pobierz rolƒô, aby sprawdziƒá czy istnieje
        const role = await guild.roles.fetch(roleInfo.roleId).catch(err => {
          logger.error(`Nie mo≈ºna znale≈∫ƒá roli ${roleInfo.roleId}: ${err.message}`);
          return null;
        });
        
        if (!role) {
          logger.error(`Rola o ID ${roleInfo.roleId} nie istnieje na serwerze`);
          return;
        }
        
        // WA≈ªNE: Sprawd≈∫ czy rola nie jest chroniona przed dodaniem jako czasowa
        if (!canAddAsTempRole(guild.id, user.id, role.id)) {
          logger.warn(`üö´ Reaction role: Blokujƒô dodanie chronionej roli ${role.name} u≈ºytkownikowi ${user.tag}`);
          // Usu≈Ñ reakcjƒô ≈ºeby u≈ºytkownik wiedzia≈Ç, ≈ºe nie mo≈ºe teraz otrzymaƒá tej roli
          try {
            await reaction.users.remove(user.id);
            logger.info(`Usuniƒôto reakcjƒô u≈ºytkownika ${user.tag} dla chronionej roli ${role.name}`);
          } catch (removeError) {
            logger.error(`Nie mo≈ºna usunƒÖƒá reakcji: ${removeError.message}`);
          }
          return;
        }

        // NOWA FUNKCJONALNO≈öƒÜ: Sprawd≈∫ czy u≈ºytkownik ma rolƒô blokujƒÖcƒÖ dostƒôp do tej roli
        if (roleInfo.blockedByRoleId && member.roles.cache.has(roleInfo.blockedByRoleId)) {
          logger.warn(`üö´ Reaction role: U≈ºytkownik ${user.tag} posiada rolƒô blokujƒÖcƒÖ ${roleInfo.blockedByRoleId}, blokujƒô dodanie roli ${role.name}`);

          // Pobierz nazwƒô roli blokujƒÖcej
          const blockingRole = await guild.roles.fetch(roleInfo.blockedByRoleId).catch(() => null);
          const blockingRoleName = blockingRole ? blockingRole.name : 'nieznana rola';

          // Usu≈Ñ reakcjƒô i wy≈õlij prywatnƒÖ wiadomo≈õƒá u≈ºytkownikowi
          try {
            await reaction.users.remove(user.id);
            logger.info(`Usuniƒôto reakcjƒô u≈ºytkownika ${user.tag} - posiada rolƒô blokujƒÖcƒÖ`);

            // Wy≈õlij prywatnƒÖ wiadomo≈õƒá u≈ºytkownikowi z informacjƒÖ
            try {
              await user.send(`Nie mo≈ºesz otrzymaƒá roli ${role.name}, poniewa≈º posiadasz rolƒô "${blockingRoleName}", kt√≥ra blokuje dostƒôp do tej roli na serwerze ${guild.name}.`);
              logger.info(`Wys≈Çano prywatnƒÖ wiadomo≈õƒá o blokadzie roli do ${user.tag}`);
            } catch (dmError) {
              logger.warn(`Nie mo≈ºna wys≈Çaƒá DM do u≈ºytkownika ${user.tag}: ${dmError.message}`);
            }
          } catch (removeError) {
            logger.error(`Nie mo≈ºna usunƒÖƒá reakcji: ${removeError.message}`);
          }
          return;
        }
        
        // Sprawd≈∫, czy bot ma uprawnienia do zarzƒÖdzania rolami
        const botMember = guild.members.cache.get(guild.client.user.id);
        if (!botMember.permissions.has('ManageRoles')) {
          logger.error('Bot nie ma uprawnie≈Ñ do zarzƒÖdzania rolami');
          return;
        }
        
        // Sprawd≈∫, czy rola jest wy≈ºej w hierarchii ni≈º rola bota
        if (role.position >= botMember.roles.highest.position) {
          logger.error(`Rola ${role.name} jest wy≈ºej w hierarchii ni≈º najwy≈ºsza rola bota`);
          return;
        }
        
        // Dodaj rolƒô
        await member.roles.add(roleInfo.roleId);
        logger.info(`Dodano rolƒô ${role.name} u≈ºytkownikowi ${member.user.tag} przez reaction role`);
        
        // UWAGA: TU NIE DODAJEMY AUTOMATYCZNIE ROLI JAKO CZASOWEJ!
        // Je≈õli wcze≈õniej by≈Ça tutaj logika dodawania r√≥l jako czasowych, zosta≈Ça usuniƒôta
        
        // Sprawd≈∫, czy powiadomienia sƒÖ w≈ÇƒÖczone
        if (roleInfo.notificationEnabled && guildSettings && guildSettings.notificationChannel) {
          try {
            const notificationChannel = await guild.channels.fetch(guildSettings.notificationChannel);
            
            if (notificationChannel) {
              await notificationChannel.send(
                `U≈ºytkownik ${user} otrzyma≈Ç rolƒô ${role.name} poprzez reakcjƒô w kanale <#${reaction.message.channel.id}>`
              );
              logger.debug('Wys≈Çano powiadomienie o przyznaniu roli');
            } else {
              logger.warn(`Kana≈Ç powiadomie≈Ñ ${guildSettings.notificationChannel} nie istnieje`);
            }
          } catch (notifError) {
            logger.error(`B≈ÇƒÖd podczas wysy≈Çania powiadomienia: ${notifError.message}`);
          }
        }
      } catch (memberError) {
        logger.error(`B≈ÇƒÖd podczas pobierania cz≈Çonka serwera: ${memberError.message}`);
      }
    } catch (error) {
      logger.error(`Og√≥lny b≈ÇƒÖd podczas obs≈Çugi reakcji: ${error.stack}`);
    }
  },
};

// Funkcja pomocnicza do logowania dodania reakcji - ulepszona wersja
async function logReactionAdd(reaction, user, guildSettings) {
  try {
    // Sprawd≈∫ czy kana≈Ç log√≥w istnieje
    if (!guildSettings.messageLogChannel) {
      logger.debug('Brak kana≈Çu log√≥w w ustawieniach serwera');
      return;
    }
    
    const logChannel = await reaction.message.guild.channels.fetch(guildSettings.messageLogChannel).catch(() => null);
    if (!logChannel) {
      logger.warn(`Kana≈Ç log√≥w ${guildSettings.messageLogChannel} nie istnieje`);
      return;
    }
    
    // Nie loguj je≈õli to jest ten sam kana≈Ç
    if (logChannel.id === reaction.message.channel.id) {
      logger.debug('Pomijam logowanie - to jest kana≈Ç log√≥w');
      return;
    }
    
    // Sprawd≈∫, czy mamy logowaƒá tylko usuniƒôte wiadomo≈õci
    if (guildSettings.logDeletedOnly) {
      logger.debug('Logowanie tylko usuniƒôtych wiadomo≈õci - pomijam reakcje');
      return;
    }
    
    // Znajd≈∫ lub utw√≥rz log wiadomo≈õci
    let messageLog = await MessageLog.findOne({ messageId: reaction.message.id });
    
    if (!messageLog) {
      // Je≈õli nie ma logu wiadomo≈õci, stw√≥rz podstawowy
      messageLog = await MessageLog.create({
        guildId: reaction.message.guild.id,
        channelId: reaction.message.channel.id,
        messageId: reaction.message.id,
        authorId: reaction.message.author?.id || 'unknown',
        authorTag: reaction.message.author?.tag || 'Unknown User',
        content: reaction.message.content || '',
        reactions: [],
        attachments: [],
        embeds: [],
        stickers: [],
        gifAttachment: null,
        createdAt: reaction.message.createdAt || new Date(),
        modActions: [],
        nicknameChanges: [],
        roleChanges: [],
        channelLogs: [],
        threadLogs: []
      });
      logger.debug(`Utworzono nowy log wiadomo≈õci dla ${reaction.message.id}`);
    }
    
    // Przygotuj informacje o emoji
    const emoji = reaction.emoji;
    const emojiInfo = {
      name: emoji.name,
      id: emoji.id,
      count: reaction.count,
      isCustom: !!emoji.id,
      animated: emoji.animated || false,
      url: emoji.id ? `https://cdn.discordapp.com/emojis/${emoji.id}.${emoji.animated ? 'gif' : 'png'}` : null,
      users: []
    };
    
    // Znajd≈∫ istniejƒÖcƒÖ reakcjƒô lub dodaj nowƒÖ
    const existingReactionIndex = messageLog.reactions.findIndex(r => 
      (r.id && r.id === emoji.id) || (!r.id && r.name === emoji.name)
    );
    
    if (existingReactionIndex !== -1) {
      // Aktualizuj istniejƒÖcƒÖ reakcjƒô
      messageLog.reactions[existingReactionIndex].count = reaction.count;
      if (!messageLog.reactions[existingReactionIndex].users.includes(user.id)) {
        messageLog.reactions[existingReactionIndex].users.push(user.id);
      }
    } else {
      // Dodaj nowƒÖ reakcjƒô
      emojiInfo.users.push(user.id);
      messageLog.reactions.push(emojiInfo);
    }
    
    await messageLog.save();
    logger.debug(`Zaktualizowano log reakcji dla wiadomo≈õci ${reaction.message.id}`);
    
    // Przygotuj informacje o emoji do wy≈õwietlenia
    const emojiDisplay = emoji.id 
      ? `<${emoji.animated ? 'a' : ''}:${emoji.name}:${emoji.id}>`
      : emoji.name;
    
    // Przygotuj embed z logiem
    const logEmbed = {
      color: 0x2ecc71, // Zielony dla dodania
      author: {
        name: user.tag,
        icon_url: user.displayAvatarURL({ dynamic: true })
      },
      description: `**Doda≈Ç reakcjƒô ${emojiDisplay} do [wiadomo≈õci](${reaction.message.url}) w <#${reaction.message.channel.id}>**`,
      fields: [
        {
          name: 'üî¢ ≈ÅƒÖczna liczba tej reakcji',
          value: reaction.count.toString(),
          inline: true
        }
      ],
      footer: {
        text: `Wiadomo≈õƒá ID: ${reaction.message.id} | User ID: ${user.id}`
      },
      timestamp: new Date()
    };
    
    // Dodaj informacje o autorze oryginalnej wiadomo≈õci je≈õli dostƒôpne
    if (reaction.message.author) {
      logEmbed.fields.push({
        name: 'üë§ Autor wiadomo≈õci',
        value: `${reaction.message.author.tag}`,
        inline: true
      });
    }
    
    // Dodaj fragment tre≈õci wiadomo≈õci je≈õli dostƒôpna
    if (reaction.message.content && reaction.message.content.trim()) {
      const contentPreview = reaction.message.content.length > 100 
        ? reaction.message.content.substring(0, 97) + '...' 
        : reaction.message.content;
      
      logEmbed.fields.push({
        name: 'üí¨ Fragment wiadomo≈õci',
        value: contentPreview,
        inline: false
      });
    }
    
    // Wy≈õlij log
    await logChannel.send({ embeds: [logEmbed] });
    
    logger.info(`‚úÖ Zalogowano dodanie reakcji ${emojiDisplay} przez ${user.tag} do wiadomo≈õci ${reaction.message.id}`);
    
  } catch (error) {
    logger.error(`‚ùå B≈ÇƒÖd podczas logowania dodania reakcji: ${error.stack}`);
  }
}
