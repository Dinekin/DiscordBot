<!DOCTYPE html>
<html lang="pl">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Logi wiadomości - <%= guild.name %></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/style.css">
    <style>
      /* Style dla wyszukiwarki użytkowników */
      #userSearchResults {
        max-height: 300px;
        overflow-y: auto;
        width: 100%;
        z-index: 1050;
      }
      
      #userSearchResults .dropdown-item {
        padding: 0.5rem 1rem;
        white-space: normal;
      }
      
      #userSearchResults .dropdown-item:hover {
        background-color: #f8f9fa;
      }
      
      #userSearchResults.show {
        display: block;
      }

      /* Style dla kart logów */
      .log-card {
        transition: all 0.2s ease;
      }
      
      .log-card:hover {
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
      }

      /* Style dla tagów i etykiet */
      .log-tag {
        font-size: 80%;
        padding: 0.2em 0.6em;
        border-radius: 20px;
      }

      /* Sekcja filtrów zaawansowanych */
      #advancedFilters {
        display: none;
      }
      
      /* Style dla wyróżniania treści */
      .log-highlight {
        background-color: #fffde7;
        padding: 2px;
      }
    </style>
  </head>
<body>
  <%- include('../partials/navbar') %>

  <div class="container mt-4">
    <div class="row">
      <%- include('../partials/guild-sidebar', { path: '/dashboard/guild/' + guild.id + '/message-logs' }) %>

      <div class="col-md-9">
        <div class="card shadow-sm mb-4">
          <div class="card-body">
            <h2 class="card-title">Zaawansowane logi</h2>
            <p class="card-text">Przeglądaj i zarządzaj rozszerzonymi logami na serwerze.</p>

            <!-- Karta statusu z ulepszonym interfejsem -->
            <div class="card mb-4 border-info">
              <div class="card-header bg-info text-white">
                <div class="d-flex align-items-center">
                  <i class="fas fa-info-circle me-2"></i>
                  <h5 class="mb-0">Status systemu logowania</h5>
                </div>
              </div>
              <div class="card-body">
                <div class="row">
                  <div class="col-md-6">
                    <div class="mb-3">
                      <label class="form-label fw-bold">Status logowania:</label>
                      <div>
                        <span class="badge <%= settings.modules && settings.modules.messageLog ? 'bg-success' : 'bg-danger' %> p-2">
                          <i class="fas <%= settings.modules && settings.modules.messageLog ? 'fa-check-circle' : 'fa-times-circle' %> me-1"></i>
                          <%= settings.modules && settings.modules.messageLog ? 'WŁĄCZONY' : 'WYŁĄCZONY' %>
                        </span>
                      </div>
                    </div>
                    
                    <div class="mb-3">
                      <label class="form-label fw-bold">Tryb logowania:</label>
                      <div>
                        <span class="badge <%= settings.logDeletedOnly ? 'bg-warning text-dark' : 'bg-info' %> p-2">
                          <i class="fas <%= settings.logDeletedOnly ? 'fa-trash' : 'fa-list' %> me-1"></i>
                          <%= settings.logDeletedOnly ? 'Tylko usunięte wiadomości' : 'Wszystkie aktywności' %>
                        </span>
                      </div>
                    </div>
                  </div>
                  
                  <div class="col-md-6">
                    <div class="mb-3">
                      <label class="form-label fw-bold">Kanał logów:</label>
                      <div>
                        <% if (settings.messageLogChannel) { %>
                          <% const channelName = channels.find(c => c.id === settings.messageLogChannel); %>
                          <span class="badge bg-primary p-2">
                            <i class="fas fa-hashtag me-1"></i>
                            <%= channelName ? channelName.name : settings.messageLogChannel %>
                          </span>
                        <% } else { %>
                          <span class="badge bg-secondary p-2">
                            <i class="fas fa-times-circle me-1"></i>
                            Nie ustawiono
                          </span>
                        <% } %>
                      </div>
                    </div>
                    
                    <div class="mb-3">
                      <label class="form-label fw-bold">Typy logowanych zdarzeń:</label>
                      <div>
                        <span class="badge bg-info p-2 me-1 mb-1">
                          <i class="fas fa-comment me-1"></i> Wiadomości
                        </span>
                        <span class="badge bg-info p-2 me-1 mb-1">
                          <i class="fas fa-user me-1"></i> Użytkownicy
                        </span>
                        <span class="badge bg-info p-2 me-1 mb-1">
                          <i class="fas fa-hashtag me-1"></i> Kanały
                        </span>
                        <span class="badge bg-info p-2 me-1 mb-1">
                          <i class="fas fa-comments me-1"></i> Wątki
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Ustawienia logowania -->
            <div class="card mb-4">
              <div class="card-header bg-primary text-white">
                <div class="d-flex align-items-center">
                  <i class="fas fa-cog me-2"></i>
                  <h5 class="mb-0">Ustawienia logowania</h5>
                </div>
              </div>
              <div class="card-body">
                <form id="messageLogSettingsForm" class="row g-3">
                  <div class="col-md-6">
                    <label for="messageLogEnabled" class="form-label">Status logowania</label>
                    <select class="form-select" id="messageLogEnabled" name="messageLogEnabled">
                      <option value="true" <%= settings.modules && settings.modules.messageLog ? 'selected' : '' %>>Włączony</option>
                      <option value="false" <%= !settings.modules || !settings.modules.messageLog ? 'selected' : '' %>>Wyłączony</option>
                    </select>
                    <div class="form-text">Włącz lub wyłącz funkcję logowania.</div>
                  </div>
                  
                  <div class="col-md-6">
                    <label for="logDeletedOnly" class="form-label">Tryb logowania</label>
                    <select class="form-select" id="logDeletedOnly" name="logDeletedOnly">
                      <option value="false" <%= (!settings.logDeletedOnly || settings.logDeletedOnly === undefined) ? 'selected' : '' %>>Wszystkie aktywności</option>
                      <option value="true" <%= settings.logDeletedOnly === true ? 'selected' : '' %>>Tylko usunięte wiadomości</option>
                    </select>
                    <div class="form-text">Wybierz, czy chcesz logować wszystkie aktywności, czy tylko usunięte wiadomości.</div>
                  </div>
                  
                  <div class="col-md-6">
                    <label for="messageLogChannel" class="form-label">Kanał logów</label>
                    <select class="form-select" id="messageLogChannel" name="messageLogChannel">
                      <option value="">Brak (wyłączony)</option>
                      <% channels.forEach(channel => { %>
                        <option value="<%= channel.id %>" <%= settings.messageLogChannel === channel.id ? 'selected' : '' %>>#<%= channel.name %></option>
                      <% }); %>
                    </select>
                    <div class="form-text">Wybierz kanał, na który będą wysyłane powiadomienia o zdarzeniach.</div>
                  </div>
                  
                  <div class="col-12">
                    <button type="button" class="btn btn-primary" onclick="saveSettings('<%= guild.id %>')">
                      <i class="fas fa-save me-2"></i> Zapisz ustawienia
                    </button>
                  </div>
                </form>
              </div>
            </div>

            <!-- Wyszukiwanie wiadomości -->
            <div class="card mb-4">
              <div class="card-header bg-secondary text-white">
                <div class="d-flex align-items-center justify-content-between">
                  <div>
                    <i class="fas fa-search me-2"></i>
                    <h5 class="mb-0 d-inline">Wyszukiwanie logów</h5>
                  </div>
                  <button class="btn btn-sm btn-light" type="button" onclick="toggleAdvancedFilters()">
                    <i class="fas fa-filter me-1"></i> Filtry zaawansowane
                  </button>
                </div>
              </div>
              <div class="card-body">
                <form id="searchForm">
                  <div class="row g-3">
                    <div class="col-md-6">
                      <label for="userSearch" class="form-label">Użytkownik</label>
                      <div class="input-group">
                        <input type="text" class="form-control" id="userSearch" placeholder="Wyszukaj po nazwie lub ID">
                        <input type="hidden" id="userId" name="userId">
                        <button class="btn btn-outline-secondary" type="button" onclick="searchUsers()">
                          <i class="fas fa-search"></i>
                        </button>
                      </div>
                      <div id="userSearchResults" class="dropdown-menu w-100"></div>
                    </div>
                    
                    <div class="col-md-6">
                      <label for="channelId" class="form-label">Kanał</label>
                      <select class="form-select" id="channelId" name="channelId">
                        <option value="">Wszystkie kanały</option>
                        <% channels.forEach(channel => { %>
                          <option value="<%= channel.id %>">#<%= channel.name %></option>
                        <% }); %>
                      </select>
                    </div>
                    
                    <div class="col-md-6">
                      <label for="logType" class="form-label">Typ logu</label>
                      <select class="form-select" id="logType" name="logType">
                        <option value="all">Wszystkie typy</option>
                        <option value="message">Wiadomości</option>
                        <option value="member">Użytkownicy</option>
                        <option value="channel">Kanały</option>
                        <option value="thread">Wątki</option>
                        <option value="role">Role</option>
                      </select>
                    </div>
                    
                    <div class="col-md-6">
                      <label for="status" class="form-label">Status</label>
                      <select class="form-select" id="status" name="status">
                        <option value="">Wszystkie</option>
                        <option value="deleted">Usunięte</option>
                        <option value="edited">Edytowane</option>
                        <option value="created">Utworzone</option>
                      </select>
                    </div>
                    
                    <!-- Sekcja filtrów zaawansowanych -->
                    <div class="col-12" id="advancedFilters">
                      <div class="card bg-light">
                        <div class="card-body">
                          <h6 class="card-title">Filtry zaawansowane</h6>
                          <div class="row g-3">
                            <div class="col-md-6">
                              <label for="contentSearch" class="form-label">Zawartość</label>
                              <input type="text" class="form-control" id="contentSearch" name="contentSearch" placeholder="Szukaj w treści...">
                            </div>
                            
                            <div class="col-md-6">
                              <label for="dateRange" class="form-label">Zakres dat</label>
                              <select class="form-select" id="dateRange" name="dateRange">
                                <option value="">Dowolny</option>
                                <option value="today">Dzisiaj</option>
                                <option value="yesterday">Wczoraj</option>
                                <option value="week">Ostatni tydzień</option>
                                <option value="month">Ostatni miesiąc</option>
                              </select>
                            </div>
                            
                            <div class="col-md-6">
                              <label for="hasAttachments" class="form-label">Załączniki</label>
                              <select class="form-select" id="hasAttachments" name="hasAttachments">
                                <option value="">Wszystkie wiadomości</option>
                                <option value="yes">Z załącznikami</option>
                                <option value="no">Bez załączników</option>
                              </select>
                            </div>
                            
                            <div class="col-md-6">
                              <label for="hasReactions" class="form-label">Reakcje</label>
                              <select class="form-select" id="hasReactions" name="hasReactions">
                                <option value="">Wszystkie wiadomości</option>
                                <option value="yes">Z reakcjami</option>
                                <option value="no">Bez reakcji</option>
                              </select>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div class="col-12">
                      <button type="button" class="btn btn-primary" onclick="searchLogs('<%= guild.id %>')">
                        <i class="fas fa-search me-2"></i> Wyszukaj
                      </button>
                      <button type="button" class="btn btn-outline-secondary ms-2" onclick="resetSearchForm()">
                        <i class="fas fa-redo me-2"></i> Resetuj
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            </div>

            <!-- Wyniki wyszukiwania -->
            <div id="searchResults" class="mt-4 d-none">
              <div class="card">
                <div class="card-header bg-success text-white">
                  <div class="d-flex align-items-center justify-content-between">
                    <div>
                      <i class="fas fa-list me-2"></i>
                      <h5 class="mb-0 d-inline">Wyniki wyszukiwania</h5>
                    </div>
                    <div>
                      <span class="badge bg-light text-dark" id="resultsCount">0 wyników</span>
                    </div>
                  </div>
                </div>
                <div class="card-body">
                  <div id="resultsContainer">
                    <!-- Tutaj będą wstawiane wyniki wyszukiwania -->
                  </div>
                  
                  <div id="paginationControls" class="d-flex justify-content-center mt-3">
                    <!-- Paginacja będzie wstawiona tutaj przez JavaScript -->
                  </div>
                  
                  <div id="noResults" class="alert alert-info d-none">
                    <i class="fas fa-info-circle me-2"></i> Nie znaleziono żadnych logów spełniających kryteria wyszukiwania.
                  </div>
                </div>
              </div>
            </div>

            <!-- Sekcja statystyk (nowa) -->
            <div class="card mt-4">
              <div class="card-header bg-dark text-white">
                <div class="d-flex align-items-center">
                  <i class="fas fa-chart-bar me-2"></i>
                  <h5 class="mb-0">Statystyki logów</h5>
                </div>
              </div>
              <div class="card-body">
                <div class="row text-center">
                  <div class="col-md-3 mb-3">
                    <div class="card bg-light h-100">
                      <div class="card-body">
                        <h3 class="text-primary" id="statMessages">-</h3>
                        <p class="mb-0">
                          <i class="fas fa-comment me-1"></i> Wiadomości
                        </p>
                      </div>
                    </div>
                  </div>
                  
                  <div class="col-md-3 mb-3">
                    <div class="card bg-light h-100">
                      <div class="card-body">
                        <h3 class="text-danger" id="statDeleted">-</h3>
                        <p class="mb-0">
                          <i class="fas fa-trash me-1"></i> Usunięte
                        </p>
                      </div>
                    </div>
                  </div>
                  
                  <div class="col-md-3 mb-3">
                    <div class="card bg-light h-100">
                      <div class="card-body">
                        <h3 class="text-warning" id="statEdited">-</h3>
                        <p class="mb-0">
                          <i class="fas fa-edit me-1"></i> Edytowane
                        </p>
                      </div>
                    </div>
                  </div>
                  
                  <div class="col-md-3 mb-3">
                    <div class="card bg-light h-100">
                      <div class="card-body">
                        <h3 class="text-success" id="statAttachments">-</h3>
                        <p class="mb-0">
                          <i class="fas fa-paperclip me-1"></i> Załączniki
                        </p>
                      </div>
                    </div>
                  </div>
                </div>
                
                <div class="text-center mt-3">
                  <button class="btn btn-sm btn-dark" onclick="loadStatistics('<%= guild.id %>')">
                    <i class="fas fa-sync me-1"></i> Odśwież statystyki
                  </button>
                </div>
              </div>
            </div>

            <!-- Modal do wyświetlania szczegółów logu -->
            <div class="modal fade" id="logDetailsModal" tabindex="-1" aria-hidden="true">
              <div class="modal-dialog modal-lg">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title">Szczegóły logu</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                    <div id="logDetails">
                      <!-- Szczegóły logu będą wstawione tutaj przez JavaScript -->
                    </div>
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
                  </div>
                </div>
              </div>
            </div>

            <!-- Modal do wyświetlania użytkowników reakcji -->
            <div class="modal fade" id="reactionUsersModal" tabindex="-1" aria-hidden="true">
              <div class="modal-dialog">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title">Użytkownicy reakcji</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                    <div id="reactionUsersList">
                      <!-- Lista użytkowników będzie wstawiona tutaj przez JavaScript -->
                    </div>
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
  <script src="/js/dark-mode.js"></script>
  <script>
    // ==================
    // Globalne zmienne
    // ==================
    let currentLogId = null;
    let searchTimeout = null;
    let currentPage = 1;
    let totalPages = 1;
    let lastSearchParams = {};

    // ==================
    // Funkcje pomocnicze
    // ==================
    
    // Przełączanie filtrów zaawansowanych
    function toggleAdvancedFilters() {
      const filtersSection = document.getElementById('advancedFilters');
      if (filtersSection.style.display === 'none' || !filtersSection.style.display) {
        filtersSection.style.display = 'block';
      } else {
        filtersSection.style.display = 'none';
      }
    }
    
    // Resetowanie formularza wyszukiwania
    function resetSearchForm() {
      document.getElementById('searchForm').reset();
      document.getElementById('userSearch').value = '';
      document.getElementById('userId').value = '';
    }
    
    // Formatowanie rozmiaru pliku
    function formatFileSize(bytes) {
      if (bytes === 0) return '0 B';
      
      const k = 1024;
      const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
    
    // Formatowanie daty
    function formatDate(dateString) {
      const date = new Date(dateString);
      return date.toLocaleDateString('pl-PL') + ' ' + date.toLocaleTimeString('pl-PL');
    }
    
    // Skracanie tekstu z zachowaniem pełnych słów
    function truncateText(text, maxLength) {
      if (!text) return '';
      if (text.length <= maxLength) return text;
      
      return text.substr(0, text.lastIndexOf(' ', maxLength)) + '...';
    }

    // ==================
    // Wyszukiwanie użytkowników
    // ==================
    
    const userSearchInput = document.getElementById('userSearch');
    const userSearchResults = document.getElementById('userSearchResults');
    const userIdInput = document.getElementById('userId');
    
    userSearchInput.addEventListener('input', function() {
      clearTimeout(searchTimeout);
      
      if (!this.value || this.value.length < 2) {
        userSearchResults.classList.remove('show');
        return;
      }
      
      searchTimeout = setTimeout(() => {
        searchUsers();
      }, 500);
    });
    
    document.addEventListener('click', function(event) {
      if (!userSearchInput.contains(event.target) && !userSearchResults.contains(event.target)) {
        userSearchResults.classList.remove('show');
      }
    });
    
    async function searchUsers() {
      const query = userSearchInput.value;
      
      if (!query || query.length < 2) {
        userSearchResults.classList.remove('show');
        return;
      }
      
      try {
        const guildId = '<%= guild.id %>';
        const response = await fetch(`/api/guilds/${guildId}/search-users?query=${encodeURIComponent(query)}`);
        const data = await response.json();
        
        if (data.success) {
          displayUserSearchResults(data.users);
        } else {
          console.error('Błąd wyszukiwania:', data.error);
        }
      } catch (error) {
        console.error('Błąd wyszukiwania:', error);
      }
    }
    
    function displayUserSearchResults(users) {
      userSearchResults.innerHTML = '';
      
      if (users.length === 0) {
        const noResults = document.createElement('div');
        noResults.className = 'dropdown-item disabled';
        noResults.textContent = 'Nie znaleziono użytkowników';
        userSearchResults.appendChild(noResults);
      } else {
        users.forEach(user => {
          const item = document.createElement('a');
          item.className = 'dropdown-item d-flex align-items-center';
          item.href = '#';
          item.onclick = (e) => {
            e.preventDefault();
            selectUser(user);
          };
          
          if (user.avatar) {
            const avatar = document.createElement('img');
            avatar.src = user.avatar;
            avatar.alt = user.username;
            avatar.className = 'rounded-circle me-2';
            avatar.style.width = '24px';
            avatar.style.height = '24px';
            item.appendChild(avatar);
          }
          
          const userInfo = document.createElement('div');
          userInfo.innerHTML = `
            <div>${user.displayName}</div>
            <small class="text-muted">${user.tag} (ID: ${user.id})</small>
          `;
          item.appendChild(userInfo);
          
          userSearchResults.appendChild(item);
        });
      }
      
      userSearchResults.classList.add('show');
    }
    
    function selectUser(user) {
      userIdInput.value = user.id;
      userSearchInput.value = user.displayName;
      userSearchResults.classList.remove('show');
    }

    // ==================
    // Wyszukiwanie i wyświetlanie logów
    // ==================
    
    async function searchLogs(guildId) {
      const userId = document.getElementById('userId').value;
      const userInput = document.getElementById('userSearch').value;
      const channelId = document.getElementById('channelId').value;
      const logType = document.getElementById('logType').value;
      const status = document.getElementById('status').value;
      const contentSearch = document.getElementById('contentSearch')?.value;
      const dateRange = document.getElementById('dateRange')?.value;
      const hasAttachments = document.getElementById('hasAttachments')?.value;
      const hasReactions = document.getElementById('hasReactions')?.value;
      
      // Zapisz parametry wyszukiwania do użycia przy zmianie strony
      lastSearchParams = {
        userId,
        userInput,
        channelId,
        logType,
        status,
        contentSearch,
        dateRange,
        hasAttachments,
        hasReactions
      };
      
      // Zresetuj stronę przy nowym wyszukiwaniu
      currentPage = 1;
      
      // Wywołaj wyszukiwanie z aktualnymi parametrami
      searchLogsWithPage(guildId, currentPage, lastSearchParams);
    }
    
    async function searchLogsWithPage(guildId, page, params) {
      try {
        // Pokaż wskaźnik ładowania
        document.getElementById('resultsContainer').innerHTML = '<div class="text-center p-4"><div class="spinner-border text-primary" role="status"></div><p class="mt-2">Wyszukiwanie logów...</p></div>';
        document.getElementById('searchResults').classList.remove('d-none');
        document.getElementById('noResults').classList.add('d-none');
        
        const queryParams = new URLSearchParams();
        queryParams.append('page', page);
        
        if (params.userId) {
          queryParams.append('userId', params.userId);
        } else if (params.userInput) {
          queryParams.append('userQuery', params.userInput.trim());
        }
        
        if (params.channelId) queryParams.append('channelId', params.channelId);
        if (params.logType && params.logType !== 'all') queryParams.append('logType', params.logType);
        if (params.status) queryParams.append('status', params.status);
        if (params.contentSearch) queryParams.append('content', params.contentSearch);
        if (params.dateRange) queryParams.append('dateRange', params.dateRange);
        if (params.hasAttachments) queryParams.append('hasAttachments', params.hasAttachments);
        if (params.hasReactions) queryParams.append('hasReactions', params.hasReactions);
        
        const response = await fetch(`/api/guilds/${guildId}/message-logs?${queryParams.toString()}`);
        const data = await response.json();
        
        if (data.success) {
          displayResults(data.logs, data.page, data.totalPages, data.channels, data.users);
          
          // Aktualizuj globalne zmienne
          currentPage = data.page;
          totalPages = data.totalPages;
          
          // Aktualizuj licznik wyników
          const resultsCount = document.getElementById('resultsCount');
          resultsCount.textContent = `${data.totalDocs || data.logs.length} wyników`;
        } else {
          // Pokaż błąd
          document.getElementById('resultsContainer').innerHTML = `
            <div class="alert alert-danger">
              <i class="fas fa-exclamation-circle me-2"></i>
              Błąd: ${data.error || 'Wystąpił błąd podczas wyszukiwania'}
            </div>
          `;
        }
      } catch (error) {
        console.error('Błąd:', error);
        document.getElementById('resultsContainer').innerHTML = `
          <div class="alert alert-danger">
            <i class="fas fa-exclamation-circle me-2"></i>
            Wystąpił błąd podczas wyszukiwania logów
          </div>
        `;
      }
    }
    
    function displayResults(logs, page, totalPages, channels, users) {
      const resultsContainer = document.getElementById('resultsContainer');
      const searchResults = document.getElementById('searchResults');
      const paginationControls = document.getElementById('paginationControls');
      const noResults = document.getElementById('noResults');
      
      // Pokaż sekcję wyników
      searchResults.classList.remove('d-none');
      
      // Wyczyść kontener wyników
      resultsContainer.innerHTML = '';
      
      if (logs.length === 0) {
        noResults.classList.remove('d-none');
        paginationControls.innerHTML = '';
        return;
      }
      
      noResults.classList.add('d-none');
      
      // Zamiast tabeli, użyjemy kart dla lepszej prezentacji danych
      logs.forEach(log => {
        const card = createLogCard(log, channels, users);
        resultsContainer.appendChild(card);
      });
      
      // Dodaj paginację
      if (totalPages > 1) {
        let paginationHTML = '<nav><ul class="pagination">';
        
        // Przycisk "Poprzednia"
        paginationHTML += `
          <li class="page-item ${page === 1 ? 'disabled' : ''}">
            <a class="page-link" href="#" onclick="${page > 1 ? `changePage(${page - 1})` : ''};return false;">
              <i class="fas fa-chevron-left"></i> Poprzednia
            </a>
          </li>
        `;
        
        // Numery stron
        const maxPages = 5; // Maksymalna liczba przycisków stron
        let startPage = Math.max(1, page - Math.floor(maxPages / 2));
        let endPage = Math.min(totalPages, startPage + maxPages - 1);
        
        if (endPage - startPage + 1 < maxPages) {
          startPage = Math.max(1, endPage - maxPages + 1);
        }
        
        if (startPage > 1) {
          paginationHTML += `
            <li class="page-item">
              <a class="page-link" href="#" onclick="changePage(1);return false;">1</a>
            </li>
          `;
          
          if (startPage > 2) {
            paginationHTML += `
              <li class="page-item disabled">
                <span class="page-link">...</span>
              </li>
            `;
          }
        }
        
        for (let i = startPage; i <= endPage; i++) {
          paginationHTML += `
            <li class="page-item ${page === i ? 'active' : ''}">
              <a class="page-link" href="#" onclick="changePage(${i});return false;">${i}</a>
            </li>
          `;
        }
        
        if (endPage < totalPages) {
          if (endPage < totalPages - 1) {
            paginationHTML += `
              <li class="page-item disabled">
                <span class="page-link">...</span>
              </li>
            `;
          }
          
          paginationHTML += `
            <li class="page-item">
              <a class="page-link" href="#" onclick="changePage(${totalPages});return false;">${totalPages}</a>
            </li>
          `;
        }
        
        // Przycisk "Następna"
        paginationHTML += `
          <li class="page-item ${page === totalPages ? 'disabled' : ''}">
            <a class="page-link" href="#" onclick="${page < totalPages ? `changePage(${page + 1})` : ''};return false;">
              Następna <i class="fas fa-chevron-right"></i>
            </a>
          </li>
        `;
        
        paginationHTML += '</ul></nav>';
        paginationControls.innerHTML = paginationHTML;
      } else {
        paginationControls.innerHTML = '';
      }
    }
    
    // Tworzenie karty dla pojedynczego logu
    function createLogCard(log, channels, users) {
      const card = document.createElement('div');
      card.className = 'card log-card mb-3';
      
      // Określ kolor karty na podstawie typu logu
      let headerClass = 'bg-light';
      let logIcon = 'comment';
      let logTitle = 'Wiadomość';
      
      if (log.deletedAt) {
        headerClass = 'bg-danger text-white';
        logIcon = 'trash';
        logTitle = 'Wiadomość usunięta';
      } else if (log.editedAt) {
        headerClass = 'bg-warning';
        logIcon = 'edit';
        logTitle = 'Wiadomość edytowana';
      } else if (log.channelLogs && log.channelLogs.length > 0) {
        headerClass = 'bg-info text-white';
        logIcon = 'hashtag';
        logTitle = 'Kanał';
      } else if (log.threadLogs && log.threadLogs.length > 0) {
        headerClass = 'bg-primary text-white';
        logIcon = 'comments';
        logTitle = 'Wątek';
      } else if (log.modActions && log.modActions.length > 0) {
        headerClass = 'bg-danger text-white';
        logIcon = 'gavel';
        logTitle = 'Akcja moderacyjna';
      }
      
      // Przygotuj dane autora i kanału
      const authorName = users[log.authorId]?.username || log.authorTag || 'Nieznany użytkownik';
      const channelName = channels[log.channelId] ? `#${channels[log.channelId]}` : 'Nieznany kanał';
      const createdDate = formatDate(log.createdAt);
      
      // Skrócona treść
      let contentPreview = log.content || '';
      if (contentPreview) {
        contentPreview = truncateText(contentPreview, 150);
      } else if (log.stickers && log.stickers.length > 0) {
        contentPreview = `[Naklejka: ${log.stickers[0].name}]`;
      } else if (log.attachments && log.attachments.length > 0) {
        contentPreview = `[Załącznik: ${log.attachments[0].name}]`;
      } else if (log.embeds && log.embeds.length > 0) {
        contentPreview = '[Osadzenie]';
      } else {
        contentPreview = '(Brak treści)';
      }
      
      // Przygotuj etykiety
      let badges = '';
      
      if (log.attachments && log.attachments.length > 0) {
        badges += `<span class="badge bg-secondary log-tag me-1"><i class="fas fa-paperclip me-1"></i>${log.attachments.length}</span>`;
      }
      
      if (log.reactions && log.reactions.length > 0) {
        badges += `<span class="badge bg-primary log-tag me-1"><i class="fas fa-smile me-1"></i>${log.reactions.length}</span>`;
      }
      
      if (log.stickers && log.stickers.length > 0) {
        badges += `<span class="badge bg-info log-tag me-1"><i class="fas fa-sticky-note me-1"></i>${log.stickers.length}</span>`;
      }
      
      if (log.reference) {
        badges += `<span class="badge bg-secondary log-tag me-1"><i class="fas fa-reply me-1"></i>Odpowiedź</span>`;
      }
      
      if (log.gifAttachment) {
        badges += `<span class="badge bg-dark log-tag me-1"><i class="fas fa-film me-1"></i>GIF</span>`;
      }
      
      card.innerHTML = `
        <div class="card-header ${headerClass}">
          <div class="d-flex align-items-center justify-content-between">
            <div>
              <i class="fas fa-${logIcon} me-2"></i>
              <span class="fw-bold">${logTitle}</span>
            </div>
            <div>
              <small>${createdDate}</small>
            </div>
          </div>
        </div>
        <div class="card-body">
          <div class="d-flex align-items-center mb-2">
            <div class="me-auto">
              <strong>${authorName}</strong> w ${channelName}
            </div>
            <div>
              ${badges}
            </div>
          </div>
          
          <div class="log-content mb-2">
            ${contentPreview}
          </div>
          
          <div class="text-end">
            <button class="btn btn-sm btn-info" onclick="showLogDetails('${log._id}')">
              <i class="fas fa-eye me-1"></i> Szczegóły
            </button>
          </div>
        </div>
      `;
      
      return card;
    }
    
    // Zmiana strony
    function changePage(page) {
      const guildId = '<%= guild.id %>';
      searchLogsWithPage(guildId, page, lastSearchParams);
    }

    // ==================
    // Wyświetlanie szczegółów logu
    // ==================
    
    async function showLogDetails(logId) {
      try {
        const guildId = '<%= guild.id %>';
        
        // Pokaż wskaźnik ładowania w modalu
        document.getElementById('logDetails').innerHTML = `
          <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status"></div>
            <p class="mt-2">Ładowanie szczegółów...</p>
          </div>
        `;
        
        // Otwórz modal
        const modal = new bootstrap.Modal(document.getElementById('logDetailsModal'));
        modal.show();
        
        const response = await fetch(`/api/guilds/${guildId}/message-logs/${logId}`);
        const data = await response.json();
        
        if (data.success) {
          displayLogDetails(data.log, data.channels, data.users);
          
          // Zapisz aktualne ID logu
          currentLogId = logId;
        } else {
          document.getElementById('logDetails').innerHTML = `
            <div class="alert alert-danger">
              <i class="fas fa-exclamation-circle me-2"></i>
              Błąd: ${data.error || 'Nie można pobrać szczegółów logu'}
            </div>
          `;
        }
      } catch (error) {
        console.error('Błąd:', error);
        document.getElementById('logDetails').innerHTML = `
          <div class="alert alert-danger">
            <i class="fas fa-exclamation-circle me-2"></i>
            Wystąpił błąd podczas pobierania szczegółów logu
          </div>
        `;
      }
    }
    
    function displayLogDetails(log, channels, users) {
      const logDetails = document.getElementById('logDetails');
      
      const authorName = users[log.authorId]?.username || log.authorTag || 'Nieznany użytkownik';
      const channelName = channels[log.channelId] ? `#${channels[log.channelId]}` : 'Nieznany kanał';
      
      const createdDate = formatDate(log.createdAt);
      const editedDate = log.editedAt ? formatDate(log.editedAt) : null;
      const deletedDate = log.deletedAt ? formatDate(log.deletedAt) : null;
      
      // Określ typ logu i status
      let logTypeIcon = 'comment';
      let logTypeText = 'Wiadomość';
      let statusBadge = '<span class="badge bg-success">Aktywna</span>';
      
      if (log.deletedAt) {
        statusBadge = `<span class="badge bg-danger">Usunięta ${deletedDate}</span>`;
        logTypeIcon = 'trash';
      } else if (log.editedAt) {
        statusBadge = `<span class="badge bg-warning text-dark">Edytowana ${editedDate}</span>`;
        logTypeIcon = 'edit';
      }
      
      if (log.channelLogs && log.channelLogs.length > 0) {
        logTypeIcon = 'hashtag';
        logTypeText = 'Kanał';
      } else if (log.threadLogs && log.threadLogs.length > 0) {
        logTypeIcon = 'comments';
        logTypeText = 'Wątek';
      } else if (log.modActions && log.modActions.length > 0) {
        logTypeIcon = 'gavel';
        logTypeText = 'Akcja moderacyjna';
      }
      
      // Nagłówek szczegółów
      let detailsHTML = `
        <div class="card mb-3">
          <div class="card-header bg-primary text-white">
            <div class="d-flex align-items-center">
              <i class="fas fa-${logTypeIcon} me-2"></i>
              <h5 class="mb-0">${logTypeText} - Szczegóły</h5>
            </div>
          </div>
          <div class="card-body">
            <div class="row mb-3">
              <div class="col-md-6">
                <h6>Informacje podstawowe</h6>
                <table class="table table-sm">
                  <tr>
                    <th style="width: 130px;">ID wiadomości:</th>
                    <td><code>${log.messageId}</code></td>
                  </tr>
                  <tr>
                    <th>Autor:</th>
                    <td>${authorName}</td>
                  </tr>
                  <tr>
                    <th>ID autora:</th>
                    <td><code>${log.authorId}</code></td>
                  </tr>
                  <tr>
                    <th>Kanał:</th>
                    <td>${channelName}</td>
                  </tr>
                  <tr>
                    <th>ID kanału:</th>
                    <td><code>${log.channelId}</code></td>
                  </tr>
                </table>
              </div>
              
              <div class="col-md-6">
                <h6>Status i daty</h6>
                <table class="table table-sm">
                  <tr>
                    <th style="width: 130px;">Status:</th>
                    <td>${statusBadge}</td>
                  </tr>
                  <tr>
                    <th>Utworzono:</th>
                    <td>${createdDate}</td>
                  </tr>
                  ${editedDate ? `
                  <tr>
                    <th>Edytowano:</th>
                    <td>${editedDate}</td>
                  </tr>` : ''}
                  ${deletedDate ? `
                  <tr>
                    <th>Usunięto:</th>
                    <td>${deletedDate}</td>
                  </tr>` : ''}
                </table>
              </div>
            </div>
      `;
      
      // Treść wiadomości
      detailsHTML += `
        <div class="mb-3">
          <h6>Treść wiadomości:</h6>
          <div class="p-3 bg-light border rounded">
            ${log.content ? log.content : (
              log.stickers && log.stickers.length > 0 ? '<em>Wiadomość zawiera tylko naklejkę, bez tekstu</em>' :
              log.attachments && log.attachments.length > 0 ? '<em>Wiadomość zawiera tylko załącznik, bez tekstu</em>' :
              log.embeds && log.embeds.length > 0 ? '<em>Wiadomość zawiera tylko osadzenie, bez tekstu</em>' :
              '<em>Brak treści</em>'
            )}
          </div>
        </div>
      `;
      
      // Oryginalna treść jeśli edytowano
      if (log.originalContent && log.editedAt) {
        detailsHTML += `
          <div class="mb-3">
            <h6>Oryginalna treść przed edycją:</h6>
            <div class="p-3 bg-light border rounded">
              ${log.originalContent || '<em>Brak treści</em>'}
            </div>
          </div>
        `;
      }
      
      // Zamknij główną kartę
      detailsHTML += `
          </div>
        </div>
      `;
      
      // Akcje moderacyjne (jeśli istnieją)
      if (log.modActions && log.modActions.length > 0) {
        detailsHTML += `
          <div class="card mb-3">
            <div class="card-header bg-danger text-white">
              <div class="d-flex align-items-center">
                <i class="fas fa-gavel me-2"></i>
                <h5 class="mb-0">Akcje moderacyjne</h5>
              </div>
            </div>
            <div class="card-body">
              <div class="list-group">
        `;
        
        log.modActions.forEach(action => {
          const actionDate = formatDate(action.createdAt);
          let actionIcon = 'gavel';
          let actionColor = 'danger';
          
          switch (action.type) {
            case 'ban':
              actionIcon = 'ban';
              break;
            case 'unban':
              actionIcon = 'unlock';
              actionColor = 'success';
              break;
            case 'kick':
              actionIcon = 'boot';
              break;
            case 'timeout':
              actionIcon = 'clock';
              actionColor = 'warning';
              break;
            case 'remove_timeout':
              actionIcon = 'volume-up';
              actionColor = 'success';
              break;
            case 'warn':
              actionIcon = 'exclamation-triangle';
              actionColor = 'warning';
              break;
          }
          
          detailsHTML += `
            <div class="list-group-item">
              <div class="d-flex align-items-center">
                <div class="me-3">
                  <span class="badge bg-${actionColor} p-2 rounded-circle">
                    <i class="fas fa-${actionIcon}"></i>
                  </span>
                </div>
                <div class="flex-grow-1">
                  <div class="d-flex justify-content-between">
                    <h6 class="mb-1 text-${actionColor}">
                      ${action.type.charAt(0).toUpperCase() + action.type.slice(1).replace('_', ' ')}
                    </h6>
                    <small>${actionDate}</small>
                  </div>
                  <p class="mb-1">
                    <strong>Cel:</strong> ${action.targetTag} (${action.targetId})<br>
                    <strong>Moderator:</strong> ${action.moderatorTag} (${action.moderatorId})<br>
                    <strong>Powód:</strong> ${action.reason || 'Nie podano'}
                  </p>
                  ${action.duration ? `<p class="mb-1"><strong>Czas trwania:</strong> ${action.duration}</p>` : ''}
                  ${action.expiresAt ? `<p class="mb-1"><strong>Wygasa:</strong> ${formatDate(action.expiresAt)}</p>` : ''}
                </div>
              </div>
            </div>
          `;
        });
        
        detailsHTML += `
              </div>
            </div>
          </div>
        `;
      }
      
      // Zmiany nicku (jeśli istnieją)
      if (log.nicknameChanges && log.nicknameChanges.length > 0) {
        detailsHTML += `
          <div class="card mb-3">
            <div class="card-header bg-info text-white">
              <div class="d-flex align-items-center">
                <i class="fas fa-id-card me-2"></i>
                <h5 class="mb-0">Zmiany pseudonimu</h5>
              </div>
            </div>
            <div class="card-body">
              <div class="list-group">
        `;
        
        log.nicknameChanges.forEach(change => {
          const changeDate = formatDate(change.createdAt);
          
          detailsHTML += `
            <div class="list-group-item">
              <div class="d-flex justify-content-between">
                <h6 class="mb-1">Zmiana pseudonimu</h6>
                <small>${changeDate}</small>
              </div>
              <p class="mb-1">
                <strong>Użytkownik:</strong> ${change.userTag} (${change.userId})<br>
                <strong>Stary pseudonim:</strong> ${change.oldNickname || '<em>brak</em>'}<br>
                <strong>Nowy pseudonim:</strong> ${change.newNickname || '<em>brak</em>'}<br>
                <strong>Zmieniony przez:</strong> ${change.changedByTag} (${change.changedById})<br>
                <strong>Powód:</strong> ${change.reason || 'Nie podano'}
              </p>
            </div>
          `;
        });
        
        detailsHTML += `
              </div>
            </div>
          </div>
        `;
      }
      
      // Zmiany ról (jeśli istnieją)
      if (log.roleChanges && log.roleChanges.length > 0) {
        detailsHTML += `
          <div class="card mb-3">
            <div class="card-header bg-primary text-white">
              <div class="d-flex align-items-center">
                <i class="fas fa-tags me-2"></i>
                <h5 class="mb-0">Zmiany ról</h5>
              </div>
            </div>
            <div class="card-body">
              <div class="list-group">
        `;
        
        log.roleChanges.forEach(change => {
          const changeDate = formatDate(change.createdAt);
          const isAdd = change.type === 'add';
          
          detailsHTML += `
            <div class="list-group-item">
              <div class="d-flex justify-content-between">
                <h6 class="mb-1 text-${isAdd ? 'success' : 'danger'}">
                  <i class="fas fa-${isAdd ? 'plus' : 'minus'}-circle me-1"></i>
                  ${isAdd ? 'Dodanie roli' : 'Usunięcie roli'}
                </h6>
                <small>${changeDate}</small>
              </div>
              <p class="mb-1">
                <strong>Użytkownik:</strong> ${change.userTag} (${change.userId})<br>
                <strong>Rola:</strong> ${change.roleName} (${change.roleId})<br>
                <strong>Zmienione przez:</strong> ${change.changedByTag} (${change.changedById})<br>
                ${change.reason ? `<strong>Powód:</strong> ${change.reason}` : ''}
              </p>
            </div>
          `;
        });
        
        detailsHTML += `
              </div>
            </div>
          </div>
        `;
      }
      
      // Logi kanałów (jeśli istnieją)
      if (log.channelLogs && log.channelLogs.length > 0) {
        detailsHTML += `
          <div class="card mb-3">
            <div class="card-header bg-info text-white">
              <div class="d-flex align-items-center">
                <i class="fas fa-hashtag me-2"></i>
                <h5 class="mb-0">Logi kanałów</h5>
              </div>
            </div>
            <div class="card-body">
              <div class="list-group">
        `;
        
        log.channelLogs.forEach(channelLog => {
          const logDate = formatDate(channelLog.createdAt);
          let actionColor = 'info';
          let actionIcon = 'hashtag';
          
          switch (channelLog.type) {
            case 'create':
              actionColor = 'success';
              actionIcon = 'plus-circle';
              break;
            case 'delete':
              actionColor = 'danger';
              actionIcon = 'trash';
              break;
            case 'update':
              actionColor = 'warning';
              actionIcon = 'edit';
              break;
          }
          
          detailsHTML += `
            <div class="list-group-item">
              <div class="d-flex justify-content-between">
                <h6 class="mb-1 text-${actionColor}">
                  <i class="fas fa-${actionIcon} me-1"></i>
                  ${channelLog.type === 'create' ? 'Utworzenie kanału' : 
                    channelLog.type === 'delete' ? 'Usunięcie kanału' : 'Aktualizacja kanału'}
                </h6>
                <small>${logDate}</small>
              </div>
              <p class="mb-1">
                <strong>Kanał:</strong> ${channelLog.channelName} (${channelLog.channelId})<br>
                <strong>Typ kanału:</strong> ${channelLog.channelType}<br>
                <strong>Moderator:</strong> ${channelLog.moderatorTag} (${channelLog.moderatorId})<br>
                ${channelLog.reason ? `<strong>Powód:</strong> ${channelLog.reason}<br>` : ''}
              </p>
              
              ${channelLog.changes && channelLog.changes.length > 0 ? `
                <div class="mt-2">
                  <strong>Zmiany:</strong>
                  <ul class="mb-0">
                    ${channelLog.changes.map(change => `
                      <li><strong>${change.field}:</strong> ${change.oldValue} → ${change.newValue}</li>
                    `).join('')}
                  </ul>
                </div>
              ` : ''}
            </div>
          `;
        });
        
        detailsHTML += `
              </div>
            </div>
          </div>
        `;
      }
      
      // Logi wątków (jeśli istnieją)
      if (log.threadLogs && log.threadLogs.length > 0) {
        detailsHTML += `
          <div class="card mb-3">
            <div class="card-header bg-primary text-white">
              <div class="d-flex align-items-center">
                <i class="fas fa-comments me-2"></i>
                <h5 class="mb-0">Logi wątków</h5>
              </div>
            </div>
            <div class="card-body">
              <div class="list-group">
        `;
        
        log.threadLogs.forEach(threadLog => {
          const logDate = formatDate(threadLog.createdAt);
          let actionColor = 'primary';
          let actionIcon = 'comments';
          
          switch (threadLog.type) {
            case 'create':
              actionColor = 'success';
              actionIcon = 'plus-circle';
              break;
            case 'delete':
              actionColor = 'danger';
              actionIcon = 'trash';
              break;
            case 'update':
              actionColor = 'warning';
              actionIcon = 'edit';
              break;
            case 'archive':
              actionColor = 'secondary';
              actionIcon = 'archive';
              break;
            case 'unarchive':
              actionColor = 'info';
              actionIcon = 'box-open';
              break;
          }
          
          detailsHTML += `
            <div class="list-group-item">
              <div class="d-flex justify-content-between">
                <h6 class="mb-1 text-${actionColor}">
                  <i class="fas fa-${actionIcon} me-1"></i>
                  ${threadLog.type === 'create' ? 'Utworzenie wątku' : 
                    threadLog.type === 'delete' ? 'Usunięcie wątku' : 
                    threadLog.type === 'update' ? 'Aktualizacja wątku' :
                    threadLog.type === 'archive' ? 'Archiwizacja wątku' : 'Przywrócenie wątku'}
                </h6>
                <small>${logDate}</small>
              </div>
              <p class="mb-1">
                <strong>Wątek:</strong> ${threadLog.threadName} (${threadLog.threadId})<br>
                <strong>Kanał nadrzędny:</strong> ${threadLog.parentName} (${threadLog.parentId})<br>
                <strong>Autor:</strong> ${threadLog.authorTag} (${threadLog.authorId})<br>
                ${threadLog.moderatorTag ? `<strong>Moderator:</strong> ${threadLog.moderatorTag} (${threadLog.moderatorId})<br>` : ''}
                ${threadLog.isForumPost ? '<strong>Typ:</strong> Post forum<br>' : ''}
              </p>
              
              ${threadLog.tags && threadLog.tags.length > 0 ? `
                <div class="mt-2">
                  <strong>Tagi:</strong> ${threadLog.tags.join(', ')}
                </div>
              ` : ''}
              
              ${threadLog.changes && threadLog.changes.length > 0 ? `
                <div class="mt-2">
                  <strong>Zmiany:</strong>
                  <ul class="mb-0">
                    ${threadLog.changes.map(change => `
                      <li><strong>${change.field}:</strong> ${change.oldValue} → ${change.newValue}</li>
                    `).join('')}
                  </ul>
                </div>
              ` : ''}
            </div>
          `;
        });
        
        detailsHTML += `
              </div>
            </div>
          </div>
        `;
      }
      
      // Załączniki (jeśli istnieją)
      if (log.attachments && log.attachments.length > 0) {
        detailsHTML += `
          <div class="card mb-3">
            <div class="card-header bg-secondary text-white">
              <div class="d-flex align-items-center">
                <i class="fas fa-paperclip me-2"></i>
                <h5 class="mb-0">Załączniki (${log.attachments.length})</h5>
              </div>
            </div>
            <div class="card-body">
              <div class="row">
        `;
        
        log.attachments.forEach(attachment => {
          const isImage = attachment.contentType && attachment.contentType.startsWith('image/');
          
          detailsHTML += `
            <div class="col-md-6 mb-3">
              <div class="card h-100">
                <div class="card-body">
                  <h6 class="card-title">${attachment.name}</h6>
                  <p class="card-text small">
                    <strong>Typ:</strong> ${attachment.contentType || 'nieznany'}<br>
                    <strong>Rozmiar:</strong> ${attachment.size ? formatFileSize(attachment.size) : 'nieznany'}
                  </p>
                  ${isImage && attachment.url ? `
                    <div class="text-center mb-3">
                      <img src="${attachment.url}" alt="${attachment.name}" class="img-fluid" style="max-height: 200px;">
                    </div>
                  ` : ''}
                  ${attachment.url ? `
                    <div class="text-center">
                      <a href="${attachment.url}" target="_blank" class="btn btn-sm btn-primary">
                        <i class="fas fa-external-link-alt me-1"></i> Otwórz załącznik
                      </a>
                    </div>
                  ` : `
                    <div class="alert alert-warning small">
                      <i class="fas fa-exclamation-triangle me-1"></i> Plik nie jest już dostępny
                    </div>
                  `}
                </div>
              </div>
            </div>
          `;
        });
        
        detailsHTML += `
              </div>
            </div>
          </div>
        `;
      }
      
      // Naklejki (jeśli istnieją)
      if (log.stickers && log.stickers.length > 0) {
        detailsHTML += `
          <div class="card mb-3">
            <div class="card-header bg-info text-white">
              <div class="d-flex align-items-center">
                <i class="fas fa-sticky-note me-2"></i>
                <h5 class="mb-0">Naklejki (${log.stickers.length})</h5>
              </div>
            </div>
            <div class="card-body">
              <div class="row">
        `;
        
        log.stickers.forEach(sticker => {
          detailsHTML += `
            <div class="col-md-6 mb-3">
              <div class="card h-100">
                <div class="card-header bg-light">
                  <strong>${sticker.name}</strong>
                </div>
                <div class="card-body">
                  ${sticker.url ? `
                    <div class="text-center mb-3">
                      <img src="${sticker.url}" alt="${sticker.name}" class="img-fluid" style="max-height: 200px;">
                    </div>
                  ` : `
                    <div class="alert alert-warning small">
                      <i class="fas fa-exclamation-triangle me-1"></i> Podgląd niedostępny
                    </div>
                  `}
                  
                  <table class="table table-sm">
                    <tr>
                      <th scope="row">ID</th>
                      <td><code>${sticker.id}</code></td>
                    </tr>
                    <tr>
                      <th scope="row">Format</th>
                      <td>${sticker.format || 'nieznany'}</td>
                    </tr>
                    ${sticker.description ? `
                    <tr>
                      <th scope="row">Opis</th>
                      <td>${sticker.description}</td>
                    </tr>` : ''}
                    ${sticker.packName ? `
                    <tr>
                      <th scope="row">Paczka</th>
                      <td>${sticker.packName} ${sticker.packId ? `<code>(${sticker.packId})</code>` : ''}</td>
                    </tr>` : ''}
                  </table>
                </div>
              </div>
            </div>
          `;
        });
        
        detailsHTML += `
              </div>
            </div>
          </div>
        `;
      }
      
      // Reakcje (jeśli istnieją)
      if (log.reactions && log.reactions.length > 0) {
        detailsHTML += `
          <div class="card mb-3">
            <div class="card-header bg-primary text-white">
              <div class="d-flex align-items-center">
                <i class="fas fa-smile me-2"></i>
                <h5 class="mb-0">Reakcje (${log.reactions.length})</h5>
              </div>
            </div>
            <div class="card-body">
              <div class="row">
        `;
        
        log.reactions.forEach(reaction => {
          const emojiDisplay = reaction.isCustom 
            ? `<img src="${reaction.url}" alt="${reaction.name}" height="32" class="me-1">`
            : reaction.name;
            
          detailsHTML += `
            <div class="col-md-4 mb-3">
              <div class="card h-100">
                <div class="card-body text-center">
                  <div class="mb-2" style="font-size: 2rem;">
                    ${emojiDisplay}
                  </div>
                  <div class="mb-3">
                    <span class="badge bg-primary">
                      ${reaction.count} reakcji
                    </span>
                    ${reaction.animated ? '<span class="badge bg-info ms-1">animowana</span>' : ''}
                  </div>
                  <div class="btn-group btn-group-sm w-100">
                    <button class="btn btn-info" 
                            onclick="checkReactionUsers('${log.guildId}', '${log.messageId}', '${reaction.name}', ${reaction.id ? `'${reaction.id}'` : 'null'})">
                      <i class="fas fa-users me-1"></i> Użytkownicy
                    </button>
                    <button class="btn btn-danger" 
                            onclick="removeReaction('${log.guildId}', '${log.messageId}', '${reaction.name}', ${reaction.id ? `'${reaction.id}'` : 'null'})">
                      <i class="fas fa-trash me-1"></i> Usuń
                    </button>
                  </div>
                </div>
                <div class="card-footer text-center bg-light">
                  <small class="text-muted">
                    ${reaction.isCustom ? 'Niestandardowa emotka' : 'Standardowa emotka'}
                  </small>
                </div>
              </div>
            </div>
          `;
        });
        
        detailsHTML += `
              </div>
            </div>
          </div>
        `;
      }
      
      // Referencja (odpowiedź)
      if (log.reference) {
        detailsHTML += `
          <div class="card mb-3">
            <div class="card-header bg-secondary text-white">
              <div class="d-flex align-items-center">
                <i class="fas fa-reply me-2"></i>
                <h5 class="mb-0">Odpowiedź na wiadomość</h5>
              </div>
            </div>
            <div class="card-body">
              <div class="d-flex">
                <div class="border-start border-4 border-secondary ps-3 py-1 w-100">
                  <div class="d-flex justify-content-between mb-2">
                    <div>
                      <strong>${log.reference.authorTag || 'Nieznany użytkownik'}</strong>
                    </div>
                    <div>
                      <small class="text-muted">ID: ${log.reference.messageId}</small>
                    </div>
                  </div>
                  <div class="mb-2">
                    ${log.reference.content || '<em>(Brak treści)</em>'}
                  </div>
                  <div>
                    <small class="text-muted">
                      Kanał: ${channels[log.reference.channelId] ? `#${channels[log.reference.channelId]}` : log.reference.channelId}
                    </small>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;
      }
      
      // GIF
      if (log.gifAttachment) {
        detailsHTML += `
          <div class="card mb-3">
            <div class="card-header bg-dark text-white">
              <div class="d-flex align-items-center">
                <i class="fas fa-film me-2"></i>
                <h5 class="mb-0">GIF</h5>
              </div>
            </div>
            <div class="card-body">
              <div class="row">
                <div class="col-md-6">
                  <p><strong>Platforma:</strong> ${log.gifAttachment.platform}</p>
                  <p><a href="${log.gifAttachment.url}" target="_blank" class="btn btn-sm btn-primary">
                    <i class="fas fa-external-link-alt me-1"></i> Otwórz GIF
                  </a></p>
                </div>
                <div class="col-md-6">
                  <div class="text-center">
                    <a href="${log.gifAttachment.url}" target="_blank">
                      <div class="card p-2 bg-light">
                        <div class="text-center">
                          <i class="fas fa-film fa-3x text-secondary"></i>
                          <p class="mt-2 mb-0">Kliknij, aby otworzyć GIF</p>
                        </div>
                      </div>
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;
      }
      
      // Embedy (osadzenia)
      if (log.embeds && log.embeds.length > 0) {
        detailsHTML += `
          <div class="card mb-3">
            <div class="card-header bg-success text-white">
              <div class="d-flex align-items-center">
                <i class="fas fa-code me-2"></i>
                <h5 class="mb-0">Osadzenia (${log.embeds.length})</h5>
              </div>
            </div>
            <div class="card-body">
        `;
        
        log.embeds.forEach((embed, index) => {
          const embedColor = embed.color ? `#${embed.color.toString(16).padStart(6, '0')}` : '#cccccc';
          
          detailsHTML += `
            <div class="card mb-3" style="border-left: 4px solid ${embedColor}">
              <div class="card-header bg-light">
                <div class="d-flex justify-content-between">
                  <div>
                    <strong>Osadzenie #${index + 1}</strong>
                  </div>
                  <div>
                    <small>Typ: ${embed.type || 'nieznany'}</small>
                  </div>
                </div>
              </div>
              <div class="card-body">
                ${embed.title ? `<h5 class="card-title">${embed.title}</h5>` : ''}
                ${embed.description ? `<p class="card-text">${embed.description}</p>` : ''}
                
                ${embed.author ? `
                  <div class="d-flex align-items-center mb-2">
                    ${embed.author.iconURL ? `<img src="${embed.author.iconURL}" alt="Author icon" class="me-2" style="width: 24px; height: 24px; border-radius: 50%;">` : ''}
                    <span>${embed.author.name || 'Nieznany autor'}</span>
                  </div>
                ` : ''}
                
                ${embed.image ? `
                  <div class="mb-2 text-center">
                    <img src="${embed.image.url}" alt="Embed image" class="img-fluid" style="max-height: 300px;">
                  </div>
                ` : ''}
                
                ${embed.thumbnail ? `
                  <div class="float-end ms-3 mb-3">
                    <img src="${embed.thumbnail.url}" alt="Thumbnail" style="max-width: 100px; max-height: 100px;">
                  </div>
                ` : ''}
                
                ${embed.fields && embed.fields.length > 0 ? `
                  <div class="row mt-3">
                    ${embed.fields.map(field => `
                      <div class="col-${field.inline ? '6' : '12'} mb-2">
                        <div class="card">
                          <div class="card-header py-1 px-2 small">${field.name}</div>
                          <div class="card-body py-1 px-2 small">${field.value}</div>
                        </div>
                      </div>
                    `).join('')}
                  </div>
                ` : ''}
                
                ${embed.footer ? `
                  <div class="d-flex align-items-center mt-2 pt-2 border-top">
                    ${embed.footer.iconURL ? `<img src="${embed.footer.iconURL}" alt="Footer icon" class="me-2" style="width: 20px; height: 20px; border-radius: 50%;">` : ''}
                    <small class="text-muted">${embed.footer.text}</small>
                  </div>
                ` : ''}
                
                ${embed.timestamp ? `
                  <div class="mt-2">
                    <small class="text-muted">Timestamp: ${formatDate(embed.timestamp)}</small>
                  </div>
                ` : ''}
              </div>
            </div>
          `;
        });
        
        detailsHTML += `
            </div>
          </div>
        `;
      }
      
      logDetails.innerHTML = detailsHTML;
    }

    // ==================
    // Obsługa reakcji
    // ==================
    
    async function removeReaction(guildId, messageId, emojiName, emojiId) {
      if (!confirm(`Czy na pewno chcesz usunąć reakcję "${emojiName}" z wiadomości?`)) {
        return;
      }
      
      try {
        const queryParams = emojiId ? `?id=${emojiId}` : '';
        const response = await fetch(`/api/guilds/${guildId}/messages/${messageId}/reactions/${encodeURIComponent(emojiName)}${queryParams}`, {
          method: 'DELETE'
        });
        
        const data = await response.json();
        
        if (data.success) {
          alert('Reakcja została usunięta.');
          // Odśwież widok szczegółów
          if (currentLogId) {
            showLogDetails(currentLogId);
          }
        } else {
          alert(`Błąd: ${data.error}`);
        }
      } catch (error) {
        console.error('Błąd:', error);
        alert('Wystąpił błąd podczas usuwania reakcji.');
      }
    }
    
    async function checkReactionUsers(guildId, messageId, emojiName, emojiId) {
      try {
        // Pokaż wskaźnik ładowania w modalu
        document.getElementById('reactionUsersList').innerHTML = `
          <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status"></div>
            <p class="mt-2">Pobieranie listy użytkowników...</p>
          </div>
        `;
        
        // Otwórz modal
        const modal = new bootstrap.Modal(document.getElementById('reactionUsersModal'));
        modal.show();
        
        const queryParams = emojiId ? `?id=${emojiId}` : '';
        const response = await fetch(`/api/guilds/${guildId}/messages/${messageId}/reactions/${encodeURIComponent(emojiName)}/users${queryParams}`);
        
        const data = await response.json();
        
        if (data.success) {
          // Wyświetl listę użytkowników w modalu
          const usersList = document.getElementById('reactionUsersList');
          
          if (data.users.length === 0) {
            usersList.innerHTML = `
              <div class="alert alert-info">
                <i class="fas fa-info-circle me-2"></i>
                Brak danych o użytkownikach, którzy dodali tę reakcję.
              </div>
            `;
            return;
          }
          
          usersList.innerHTML = `
            <div class="table-responsive">
              <table class="table table-striped table-hover">
                <thead>
                  <tr>
                    <th scope="col" style="width: 50px;">#</th>
                    <th scope="col">Użytkownik</th>
                    <th scope="col">ID</th>
                  </tr>
                </thead>
                <tbody>
                  ${data.users.map((user, index) => `
                    <tr>
                      <td>${index + 1}</td>
                      <td>
                        ${user.avatar ? `
                          <div class="d-flex align-items-center">
                            <img src="${user.avatar}" alt="${user.username || 'Użytkownik'}" class="rounded-circle me-2" style="width: 24px; height: 24px;">
                            <span>${user.username || 'Nieznany użytkownik'}</span>
                          </div>
                        ` : (user.username || 'Nieznany użytkownik')}
                      </td>
                      <td><code>${user.id}</code></td>
                    </tr>
                  `).join('')}
                </tbody>
              </table>
            </div>
          `;
        } else {
          // Pokaż błąd
          document.getElementById('reactionUsersList').innerHTML = `
            <div class="alert alert-danger">
              <i class="fas fa-exclamation-circle me-2"></i>
              Błąd: ${data.error || 'Wystąpił błąd podczas pobierania listy użytkowników'}
            </div>
          `;
        }
      } catch (error) {
        console.error('Błąd:', error);
        document.getElementById('reactionUsersList').innerHTML = `
          <div class="alert alert-danger">
            <i class="fas fa-exclamation-circle me-2"></i>
            Wystąpił błąd podczas pobierania listy użytkowników
          </div>
        `;
      }
    }

        // ==================
        // Statystyki logów
        // ==================

        async function loadStatistics(guildId) {
          try {
            // Pokaż wskaźniki ładowania w sekcji statystyk
            document.getElementById('statMessages').innerHTML = '<div class="spinner-border spinner-border-sm text-primary" role="status"></div>';
            document.getElementById('statDeleted').innerHTML = '<div class="spinner-border spinner-border-sm text-primary" role="status"></div>';
            document.getElementById('statEdited').innerHTML = '<div class="spinner-border spinner-border-sm text-primary" role="status"></div>';
            document.getElementById('statAttachments').innerHTML = '<div class="spinner-border spinner-border-sm text-primary" role="status"></div>';
            
            const response = await fetch(`/api/guilds/${guildId}/message-logs/stats`);
            const data = await response.json();
            
            if (data.success) {
              // Aktualizuj statystyki
              document.getElementById('statMessages').textContent = data.stats.totalMessages.toLocaleString();
              document.getElementById('statDeleted').textContent = data.stats.deletedMessages.toLocaleString();
              document.getElementById('statEdited').textContent = data.stats.editedMessages.toLocaleString();
              document.getElementById('statAttachments').textContent = data.stats.attachmentsCount.toLocaleString();
            } else {
              // Pokaż błąd
              document.getElementById('statMessages').textContent = '-';
              document.getElementById('statDeleted').textContent = '-';
              document.getElementById('statEdited').textContent = '-';
              document.getElementById('statAttachments').textContent = '-';
              
              alert(`Błąd: ${data.error || 'Nie można pobrać statystyk'}`);
            }
          } catch (error) {
            console.error('Błąd:', error);
            
            document.getElementById('statMessages').textContent = '-';
            document.getElementById('statDeleted').textContent = '-';
            document.getElementById('statEdited').textContent = '-';
            document.getElementById('statAttachments').textContent = '-';
            
            alert('Wystąpił błąd podczas pobierania statystyk');
          }
        }

        // ==================
        // Obsługa reakcji
        // ==================

        async function removeReaction(guildId, messageId, emojiName, emojiId) {
          if (!confirm(`Czy na pewno chcesz usunąć reakcję "${emojiName}" z wiadomości?`)) {
            return;
          }
          
          try {
            const queryParams = emojiId ? `?id=${emojiId}` : '';
            const response = await fetch(`/api/guilds/${guildId}/messages/${messageId}/reactions/${encodeURIComponent(emojiName)}${queryParams}`, {
              method: 'DELETE'
            });
            
            const data = await response.json();
            
            if (data.success) {
              alert('Reakcja została usunięta.');
              // Odśwież widok szczegółów
              if (currentLogId) {
                showLogDetails(currentLogId);
              }
            } else {
              alert(`Błąd: ${data.error}`);
            }
          } catch (error) {
            console.error('Błąd:', error);
            alert('Wystąpił błąd podczas usuwania reakcji.');
          }
        }

        // Załaduj statystyki po załadowaniu strony
        document.addEventListener('DOMContentLoaded', function() {
          loadStatistics('<%= guild.id %>');
        });
    // ==================
    // Zapisywanie ustawień
    // ==================
    
    async function saveSettings(guildId) {
      // Pobierz wartości z formularza
      const messageLogEnabled = document.getElementById('messageLogEnabled').value === 'true';
      const messageLogChannel = document.getElementById('messageLogChannel').value;
      const logDeletedOnly = document.getElementById('logDeletedOnly').value === 'true';
      
      // Przygotuj dane
      const data = {
        messageLog: messageLogEnabled,
        messageLogChannel: messageLogChannel,
        logDeletedOnly: logDeletedOnly
      };
      
      try {
        const response = await fetch(`/api/guilds/${guildId}/settings`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data)
        });
        
        const responseData = await response.json();
        
        if (responseData.success) {
          alert('Ustawienia zostały zapisane!');
          window.location.reload();
        } else {
          alert(`Błąd: ${responseData.error || 'Nieznany błąd podczas zapisywania'}`);
        }
      } catch (error) {
        console.error('Błąd podczas zapisywania ustawień:', error);
        alert('Wystąpił błąd podczas zapisywania ustawień');
      }
    }

    // Załaduj statystyki po załadowaniu strony
    document.addEventListener('DOMContentLoaded', function() {
      loadStatistics('<%= guild.id %>');
    });
  </script>
</body>
</html>