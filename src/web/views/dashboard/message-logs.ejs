<!DOCTYPE html>
<html lang="pl">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Logi wiadomości - <%= guild.name %></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/css/style.css">
    <style>
      /* Style dla wyszukiwarki użytkowników */
      #userSearchResults {
        max-height: 300px;
        overflow-y: auto;
        width: 100%;
        z-index: 1050;
      }
      
      #userSearchResults .dropdown-item {
        padding: 0.5rem 1rem;
        white-space: normal;
      }
      
      #userSearchResults .dropdown-item:hover {
        background-color: #f8f9fa;
      }
      
      #userSearchResults.show {
        display: block;
      }
    </style>
  </head>
<body>
  <%- include('../partials/navbar') %>

  <div class="container mt-4">
    <div class="row">
      <%- include('../partials/guild-sidebar', { path: '/dashboard/guild/' + guild.id + '/message-logs' }) %>

      <div class="col-md-9">
        <div class="card shadow-sm mb-4">
          <div class="card-body">
            <h2 class="card-title">Logi wiadomości</h2>
            <p class="card-text">Przeglądaj i zarządzaj logami wiadomości na serwerze.</p>

            <!-- Ulepszony alert statusu -->
            <div class="alert alert-info">
              <i class="fas fa-info-circle me-2"></i> 
              <strong>Status logowania wiadomości:</strong> 
              <span class="module-status <%= settings.modules && settings.modules.messageLog ? 'enabled' : 'disabled' %>">
                <%= settings.modules && settings.modules.messageLog ? 'WŁĄCZONY' : 'WYŁĄCZONY' %>
              </span>
              
              <% if (settings.modules && settings.modules.messageLog) { %>
                <div class="mt-2">
                  <strong>Kanał logów:</strong> 
                  <% if (settings.messageLogChannel) { %>
                    <% const channelName = channels.find(c => c.id === settings.messageLogChannel); %>
                    <span class="badge bg-primary">
                      #<%= channelName ? channelName.name : settings.messageLogChannel %>
                    </span>
                  <% } else { %>
                    <span class="badge bg-secondary">Nie ustawiono</span>
                  <% } %>
                  
                  <strong class="ms-3">Tryb logowania:</strong>
                  <% if (settings.logDeletedOnly) { %>
                    <span class="badge bg-warning text-dark">Tylko usunięte wiadomości</span>
                  <% } else { %>
                    <span class="badge bg-info">Wszystkie wiadomości</span>
                  <% } %>
                </div>
              <% } %>
            </div>

            <!-- Ulepszone przyciski bezpośredniego dostępu -->
            <div class="alert alert-warning mb-3">
              <strong>Masz problemy z zapisywaniem ustawień?</strong> Użyj poniższych przycisków bezpośredniego dostępu:
              
              <div class="row mt-2">
                <div class="col-md-6 mb-2">
                  <div class="card border-0 bg-light">
                    <div class="card-body py-2">
                      <h6 class="mb-2">Przełączanie modułu:</h6>
                      <a href="/api/guilds/<%= guild.id %>/toggle-message-log/on" class="btn btn-success btn-sm me-1" target="_blank">
                        <i class="fas fa-power-off me-1"></i> Włącz logi
                      </a>
                      <a href="/api/guilds/<%= guild.id %>/toggle-message-log/off" class="btn btn-danger btn-sm" target="_blank">
                        <i class="fas fa-power-off me-1"></i> Wyłącz logi
                      </a>
                    </div>
                  </div>
                </div>
                
                <div class="col-md-6 mb-2">
                  <div class="card border-0 bg-light">
                    <div class="card-body py-2">
                      <h6 class="mb-2">Tryb logowania:</h6>
                      <a href="/api/guilds/<%= guild.id %>/toggle-log-deleted-only/on" class="btn btn-warning btn-sm text-dark me-1" target="_blank">
                        <i class="fas fa-trash me-1"></i> Tylko usunięte
                      </a>
                      <a href="/api/guilds/<%= guild.id %>/toggle-log-deleted-only/off" class="btn btn-info btn-sm" target="_blank">
                        <i class="fas fa-list me-1"></i> Wszystkie wiadomości
                      </a>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="mt-2 small text-muted">
                <i class="fas fa-info-circle me-1"></i> Po kliknięciu przycisku odśwież stronę, aby zobaczyć zmiany.
              </div>
            </div>
              
            <div class="mb-4">
              <h5>Ustawienia</h5>
              <form id="messageLogSettingsForm" class="row g-3">
                <div class="col-md-4">
                  <label for="messageLogEnabled" class="form-label">Status</label>
                  <select class="form-select" id="messageLogEnabled" name="messageLogEnabled">
                    <option value="true" <%= settings.modules && settings.modules.messageLog ? 'selected' : '' %>>Włączony</option>
                    <option value="false" <%= !settings.modules || !settings.modules.messageLog ? 'selected' : '' %>>Wyłączony</option>
                  </select>
                </div>
                <div class="col-md-4">
                  <label for="messageLogChannel" class="form-label">Kanał logów</label>
                  <select class="form-select" id="messageLogChannel" name="messageLogChannel">
                    <option value="">Brak (wyłączony)</option>
                    <% channels.forEach(channel => { %>
                      <option value="<%= channel.id %>" <%= settings.messageLogChannel === channel.id ? 'selected' : '' %>>#<%= channel.name %></option>
                    <% }); %>
                  </select>
                </div>
                <div class="col-md-4">
                  <label for="logDeletedOnly" class="form-label">Tryb logowania</label>
                  <select class="form-select" id="logDeletedOnly" name="logDeletedOnly">
                    <option value="false" <%= (!settings.logDeletedOnly || settings.logDeletedOnly === undefined) ? 'selected' : '' %>>Wszystkie wiadomości</option>
                    <option value="true" <%= settings.logDeletedOnly === true ? 'selected' : '' %>>Tylko usunięte wiadomości</option>
                  </select>
                  <div class="form-text">Wybierz, czy chcesz logować wszystkie wiadomości, czy tylko te usunięte. Tryb "Tylko usunięte" pomija logi tworzenia i edycji wiadomości.</div>
                </div>
                <div class="col-12">
                  <button type="button" class="btn btn-primary" onclick="saveSettings('<%= guild.id %>')">
                    <i class="fas fa-save me-2"></i> Zapisz ustawienia
                  </button>
                </div>
              </form>
            </div>

            <div class="mb-4">
              <h5>Wyszukiwanie wiadomości</h5>
              <form id="searchForm" class="row g-3">
                <div class="col-md-4">
                  <label for="userId" class="form-label">Użytkownik</label>
                  <div class="input-group">
                    <input type="text" class="form-control" id="userSearch" placeholder="Wyszukaj po nazwie lub ID">
                    <input type="hidden" id="userId" name="userId">
                    <button class="btn btn-outline-secondary" type="button" onclick="searchUsers()">
                      <i class="fas fa-search"></i>
                    </button>
                  </div>
                  <div id="userSearchResults" class="dropdown-menu w-100"></div>
                </div>
                <div class="col-md-4">
                  <label for="channelId" class="form-label">Kanał</label>
                  <select class="form-select" id="channelId" name="channelId">
                    <option value="">Wszystkie kanały</option>
                    <% channels.forEach(channel => { %>
                      <option value="<%= channel.id %>">#<%= channel.name %></option>
                    <% }); %>
                  </select>
                </div>
                <div class="col-md-4">
                  <label for="status" class="form-label">Status</label>
                  <select class="form-select" id="status" name="status">
                    <option value="">Wszystkie</option>
                    <option value="deleted">Tylko usunięte</option>
                    <option value="edited">Tylko edytowane</option>
                  </select>
                </div>
                <div class="col-12">
                  <button type="button" class="btn btn-primary" onclick="searchLogs('<%= guild.id %>')">
                    <i class="fas fa-search me-2"></i> Wyszukaj
                  </button>
                </div>
              </form>
            </div>

            <div id="searchResults" class="mt-4 d-none">
              <h5>Wyniki wyszukiwania</h5>
              <div class="table-responsive">
                <table class="table table-striped table-hover">
                  <thead>
                    <tr>
                      <th>Data</th>
                      <th>Autor</th>
                      <th>Kanał</th>
                      <th>Treść</th>
                      <th>Status</th>
                      <th>Akcje</th>
                    </tr>
                  </thead>
                  <tbody id="resultsTable">
                    <!-- Wyniki wyszukiwania będą wstawione tutaj przez JavaScript -->
                  </tbody>
                </table>
              </div>
              <div id="paginationControls" class="d-flex justify-content-center mt-3">
                <!-- Paginacja będzie wstawiona tutaj przez JavaScript -->
              </div>
            </div>

            <!-- Modal do wyświetlania szczegółów wiadomości -->
            <div class="modal fade" id="messageDetailsModal" tabindex="-1" aria-hidden="true">
              <div class="modal-dialog modal-lg">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title">Szczegóły wiadomości</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                    <div id="messageDetails">
                      <!-- Szczegóły wiadomości będą wstawione tutaj przez JavaScript -->
                    </div>
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
                  </div>
                </div>
              </div>
            </div>

            <!-- Modal do wyświetlania użytkowników, którzy dodali reakcję -->
            <div class="modal fade" id="reactionUsersModal" tabindex="-1" aria-hidden="true">
              <div class="modal-dialog">
                <div class="modal-content">
                  <div class="modal-header">
                    <h5 class="modal-title">Użytkownicy, którzy dodali reakcję</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">
                    <div id="reactionUsersList">
                      <!-- Lista użytkowników będzie wstawiona tutaj przez JavaScript -->
                    </div>
                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Zamknij</button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
  <script>
    // Wyszukiwanie użytkowników
    let searchTimeout = null;
    const userSearchInput = document.getElementById('userSearch');
    const userSearchResults = document.getElementById('userSearchResults');
    const userIdInput = document.getElementById('userId');
    
    userSearchInput.addEventListener('input', function() {
      // Resetuj timeout przy każdym wpisanym znaku
      clearTimeout(searchTimeout);
      
      // Schowaj wyniki jeśli pole jest puste
      if (!this.value || this.value.length < 2) {
        userSearchResults.classList.remove('show');
        return;
      }
      
      // Ustaw nowy timeout aby nie wykonywać żądań przy każdym wpisanym znaku
      searchTimeout = setTimeout(() => {
        searchUsers();
      }, 500);
    });
    
    // Jeśli użytkownik kliknie poza listą wyników, ukryj ją
    document.addEventListener('click', function(event) {
      if (!userSearchInput.contains(event.target) && !userSearchResults.contains(event.target)) {
        userSearchResults.classList.remove('show');
      }
    });
    
    // Funkcja do wyszukiwania użytkowników
    async function searchUsers() {
      const query = userSearchInput.value;
      
      if (!query || query.length < 2) {
        userSearchResults.classList.remove('show');
        return;
      }
      
      try {
        const guildId = '<%= guild.id %>';
        const response = await fetch(`/api/guilds/${guildId}/search-users?query=${encodeURIComponent(query)}`);
        const data = await response.json();
        
        if (data.success) {
          displayUserSearchResults(data.users);
        } else {
          console.error('Błąd wyszukiwania:', data.error);
        }
      } catch (error) {
        console.error('Błąd wyszukiwania:', error);
      }
    }
    
    // Funkcja do wyświetlania wyników wyszukiwania
    function displayUserSearchResults(users) {
      userSearchResults.innerHTML = '';
      
      if (users.length === 0) {
        const noResults = document.createElement('div');
        noResults.className = 'dropdown-item disabled';
        noResults.textContent = 'Nie znaleziono użytkowników';
        userSearchResults.appendChild(noResults);
      } else {
        users.forEach(user => {
          const item = document.createElement('a');
          item.className = 'dropdown-item d-flex align-items-center';
          item.href = '#';
          item.onclick = (e) => {
            e.preventDefault();
            selectUser(user);
          };
          
          // Dodaj avatar jeśli dostępny
          if (user.avatar) {
            const avatar = document.createElement('img');
            avatar.src = user.avatar;
            avatar.alt = user.username;
            avatar.className = 'rounded-circle me-2';
            avatar.style.width = '24px';
            avatar.style.height = '24px';
            item.appendChild(avatar);
          }
          
          // Dodaj informacje o użytkowniku
          const userInfo = document.createElement('div');
          userInfo.innerHTML = `
            <div>${user.displayName}</div>
            <small class="text-muted">${user.tag} (ID: ${user.id})</small>
          `;
          item.appendChild(userInfo);
          
          userSearchResults.appendChild(item);
        });
      }
      
      userSearchResults.classList.add('show');
    }

    // Funkcja do usuwania reakcji
    async function removeReaction(guildId, messageId, emojiName, emojiId) {
      if (!confirm(`Czy na pewno chcesz usunąć reakcję "${emojiName}" z wiadomości?`)) {
        return;
      }
      
      try {
        const queryParams = emojiId ? `?id=${emojiId}` : '';
        const response = await fetch(`/api/guilds/${guildId}/messages/${messageId}/reactions/${encodeURIComponent(emojiName)}${queryParams}`, {
          method: 'DELETE'
        });
        
        const data = await response.json();
        
        if (data.success) {
          alert('Reakcja została usunięta.');
          // Odśwież widok szczegółów
          if (currentLogId) {
            showMessageDetails(currentLogId);
          }
        } else {
          alert(`Błąd: ${data.error}`);
        }
      } catch (error) {
        console.error('Błąd:', error);
        alert('Wystąpił błąd podczas usuwania reakcji.');
      }
    }
    
    // Funkcja do sprawdzania kto dodał reakcję
    async function checkReactionUsers(guildId, messageId, emojiName, emojiId) {
      try {
        const queryParams = emojiId ? `?id=${emojiId}` : '';
        const response = await fetch(`/api/guilds/${guildId}/messages/${messageId}/reactions/${encodeURIComponent(emojiName)}/users${queryParams}`);
        
        const data = await response.json();
        
        if (data.success) {
          // Wyświetl listę użytkowników w modalu
          const usersList = document.getElementById('reactionUsersList');
          usersList.innerHTML = '';
          
          if (data.users.length === 0) {
            usersList.innerHTML = '<p class="text-center">Brak danych o użytkownikach, którzy dodali tę reakcję.</p>';
          } else {
            const table = document.createElement('table');
            table.className = 'table table-sm table-striped';
            
            // Nagłówek tabeli
            const thead = document.createElement('thead');
            thead.innerHTML = `
              <tr>
                <th scope="col" style="width: 50px;">#</th>
                <th scope="col">Użytkownik</th>
                <th scope="col">ID</th>
              </tr>
            `;
            table.appendChild(thead);
            
            // Ciało tabeli
            const tbody = document.createElement('tbody');
            data.users.forEach((user, index) => {
              const row = document.createElement('tr');
              
              // Avatar i nazwa użytkownika
              let userCell = '';
              if (user.avatar) {
                userCell = `
                  <div class="d-flex align-items-center">
                    <img src="${user.avatar}" alt="${user.username}" class="rounded-circle me-2" style="width: 24px; height: 24px;">
                    <span>${user.username}</span>
                  </div>
                `;
              } else {
                userCell = user.username || user.id;
              }
              
              row.innerHTML = `
                <td>${index + 1}</td>
                <td>${userCell}</td>
                <td><code>${user.id}</code></td>
              `;
              
              tbody.appendChild(row);
            });
            table.appendChild(tbody);
            
            usersList.appendChild(table);
          }
          
          // Otwórz modal
          const modal = new bootstrap.Modal(document.getElementById('reactionUsersModal'));
          modal.show();
        } else {
          alert(`Błąd: ${data.error}`);
        }
      } catch (error) {
        console.error('Błąd:', error);
        alert('Wystąpił błąd podczas pobierania listy użytkowników.');
      }
    }
    
    // Przechowywanie aktualnie wyświetlanego ID logu
    let currentLogId = null;
    
    // Funkcja do wybierania użytkownika z wyników
    function selectUser(user) {
      userIdInput.value = user.id;
      userSearchInput.value = user.displayName;
      userSearchResults.classList.remove('show');
    }
    
    // POPRAWIONA funkcja do zapisywania ustawień
    async function saveSettings(guildId) {
      const messageLogEnabled = document.getElementById('messageLogEnabled').value === 'true';
      const messageLogChannel = document.getElementById('messageLogChannel').value;
      // Jawna konwersja do boolean dla bezpieczeństwa
      const logDeletedOnly = document.getElementById('logDeletedOnly').value === 'true';

      try {
        // Dodajemy logowanie aby zobaczyć, co wysyłamy
        console.log('Wysyłanie ustawień:', {
          messageLogChannel: messageLogChannel,
          'modules.messageLog': messageLogEnabled,
          logDeletedOnly: logDeletedOnly
        });
        
        const response = await fetch(`/api/guilds/${guildId}/settings`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            messageLogChannel: messageLogChannel,
            messageLog: messageLogEnabled,
            logDeletedOnly: logDeletedOnly
          })
        });

        const data = await response.json();

        if (data.success) {
          alert('Ustawienia zostały zapisane!');
          // Odśwież stronę po zapisaniu ustawień
          window.location.reload();
        } else {
          alert(`Błąd: ${data.error}`);
        }
      } catch (error) {
        console.error('Błąd:', error);
        alert('Wystąpił błąd podczas zapisywania ustawień.');
      }
    }
    
    // Wyszukiwanie logów
    async function searchLogs(guildId) {
      const userId = document.getElementById('userId').value;
      const userInput = document.getElementById('userSearch').value;
      const channelId = document.getElementById('channelId').value;
      const status = document.getElementById('status').value;
      
      try {
        const queryParams = new URLSearchParams();
        
        // Jeśli mamy dokładne ID użytkownika, użyj go
        if (userId) {
          queryParams.append('userId', userId);
          console.log(`Wyszukiwanie wiadomości dla użytkownika ID: ${userId}`);
        } 
        // W przeciwnym razie, jeśli pole wyszukiwania nie jest puste, użyj go jako zapytania
        else if (userInput && userInput.trim().length > 0) {
          queryParams.append('userQuery', userInput.trim());
          console.log(`Wyszukiwanie wiadomości dla zapytania: ${userInput.trim()}`);
        }
        
        if (channelId) queryParams.append('channelId', channelId);
        if (status) queryParams.append('status', status);
        
        const response = await fetch(`/api/guilds/${guildId}/message-logs?${queryParams.toString()}`);
        const data = await response.json();
        
        if (data.success) {
          displayResults(data.logs, data.page, data.totalPages, data.channels, data.users);
        } else {
          alert(`Błąd: ${data.error}`);
        }
      } catch (error) {
        console.error('Błąd:', error);
        alert('Wystąpił błąd podczas wyszukiwania logów.');
      }
    }
    
    // Funkcja do wyświetlania wyników
    function displayResults(logs, page, totalPages, channels, users) {
      const resultsTable = document.getElementById('resultsTable');
      const searchResults = document.getElementById('searchResults');
      const paginationControls = document.getElementById('paginationControls');
      
      // Pokaż sekcję wyników
      searchResults.classList.remove('d-none');
      
      // Wyczyść tabelę
      resultsTable.innerHTML = '';
      
      if (logs.length === 0) {
        resultsTable.innerHTML = '<tr><td colspan="6" class="text-center">Nie znaleziono żadnych wiadomości spełniających kryteria.</td></tr>';
        paginationControls.innerHTML = '';
        return;
      }
      
      // Dodaj wyniki do tabeli
      logs.forEach(log => {
        const date = new Date(log.createdAt);
        const formattedDate = date.toLocaleString();
        
        const authorName = users[log.authorId]?.username || log.authorTag || 'Nieznany użytkownik';
        const channelName = channels[log.channelId] ? `#${channels[log.channelId]}` : 'Nieznany kanał';
        
        // Skrócona treść do wyświetlenia w tabeli
        let displayContent = log.content;
        if (!displayContent || displayContent.trim() === '') {
          // Jeśli wiadomość zawiera naklejki, ale nie ma tekstu
          if (log.stickers && log.stickers.length > 0) {
            displayContent = `[Naklejka: ${log.stickers[0].name}]`;
          } else if (log.attachments && log.attachments.length > 0) {
            displayContent = `[Załącznik: ${log.attachments[0].name}]`;
          } else if (log.embeds && log.embeds.length > 0) {
            displayContent = '[Osadzenie]';
          } else {
            displayContent = '(Brak treści)';
          }
        } else if (displayContent.length > 100) {
          displayContent = displayContent.substring(0, 100) + '...';
        }
        
        // Status wiadomości
        let statusBadge = '<span class="badge bg-success">Normalna</span>';
        if (log.deletedAt) {
          statusBadge = '<span class="badge bg-danger">Usunięta</span>';
        } else if (log.editedAt) {
          statusBadge = '<span class="badge bg-warning text-dark">Edytowana</span>';
        }
        
        // Dodatkowe informacje o typie wiadomości
        let typeBadges = '';
        if (log.stickers && log.stickers.length > 0) {
          typeBadges += ' <span class="badge bg-info">Naklejka</span>';
        }
        if (log.attachments && log.attachments.length > 0) {
          typeBadges += ' <span class="badge bg-secondary">Załącznik</span>';
        }
        if (log.reactions && log.reactions.length > 0) {
          typeBadges += ' <span class="badge bg-primary">Reakcje</span>';
        }
        if (log.gifAttachment) {
          typeBadges += ' <span class="badge bg-dark">GIF</span>';
        }
        if (log.embeds && log.embeds.length > 0) {
          typeBadges += ' <span class="badge bg-success">Embed</span>';
        }
        if (log.reference) {
          typeBadges += ' <span class="badge bg-secondary">Odpowiedź</span>';
        }
        
        // Dodaj wiersz do tabeli
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${formattedDate}</td>
          <td>${authorName}</td>
          <td>${channelName}</td>
          <td>${displayContent}</td>
          <td>${statusBadge}${typeBadges}</td>
          <td>
            <button class="btn btn-sm btn-info" onclick="showMessageDetails('${log._id}')">
              <i class="fas fa-eye"></i>
            </button>
          </td>
        `;
        
        resultsTable.appendChild(row);
      });
      
      // Dodaj paginację
      if (totalPages > 1) {
        let paginationHTML = '<nav><ul class="pagination">';
        
        // Przycisk "Poprzednia"
        paginationHTML += `
          <li class="page-item ${page === 1 ? 'disabled' : ''}">
            <a class="page-link" href="#" onclick="${page > 1 ? `changePage(${page - 1})` : ''};return false;">Poprzednia</a>
          </li>
        `;
        
        // Numery stron
        for (let i = 1; i <= totalPages; i++) {
          paginationHTML += `
            <li class="page-item ${page === i ? 'active' : ''}">
              <a class="page-link" href="#" onclick="changePage(${i});return false;">${i}</a>
            </li>
          `;
        }
        
        // Przycisk "Następna"
        paginationHTML += `
          <li class="page-item ${page === totalPages ? 'disabled' : ''}">
            <a class="page-link" href="#" onclick="${page < totalPages ? `changePage(${page + 1})` : ''};return false;">Następna</a>
          </li>
        `;
        
        paginationHTML += '</ul></nav>';
        paginationControls.innerHTML = paginationHTML;
      } else {
        paginationControls.innerHTML = '';
      }
    }
    
    // Zmiana strony w paginacji
    function changePage(page) {
      // Zachowaj aktualne parametry wyszukiwania i zmień stronę
      const guildId = '<%= guild.id %>';
      const userId = document.getElementById('userId').value;
      const channelId = document.getElementById('channelId').value;
      const status = document.getElementById('status').value;
      
      // Wywołaj wyszukiwanie z numerem strony
      searchLogsWithPage(guildId, page, userId, channelId, status);
    }
    
    // Funkcja do wyszukiwania z numerem strony
    async function searchLogsWithPage(guildId, page, userId, channelId, status) {
      try {
        const queryParams = new URLSearchParams();
        queryParams.append('page', page);
        if (userId) queryParams.append('userId', userId);
        if (channelId) queryParams.append('channelId', channelId);
        if (status) queryParams.append('status', status);
        
        const response = await fetch(`/api/guilds/${guildId}/message-logs?${queryParams.toString()}`);
        const data = await response.json();
        
        if (data.success) {
          displayResults(data.logs, data.page, data.totalPages, data.channels, data.users);
        } else {
          alert(`Błąd: ${data.error}`);
        }
      } catch (error) {
        console.error('Błąd:', error);
        alert('Wystąpił błąd podczas wyszukiwania logów.');
      }
    }
    
    // Funkcja do wyświetlania szczegółów wiadomości
    async function showMessageDetails(logId) {
      try {
        const guildId = '<%= guild.id %>';
        const response = await fetch(`/api/guilds/${guildId}/message-logs/${logId}`);
        const data = await response.json();
        
        if (data.success) {
          displayMessageDetails(data.log, data.channels, data.users);
          
          // Otwórz modal
          const modal = new bootstrap.Modal(document.getElementById('messageDetailsModal'));
          modal.show();
        } else {
          alert(`Błąd: ${data.error}`);
        }
      } catch (error) {
        console.error('Błąd:', error);
        alert('Wystąpił błąd podczas pobierania szczegółów wiadomości.');
      }
    }
    
    // Funkcja do wyświetlania szczegółów wiadomości w modalu
    function displayMessageDetails(log, channels, users) {
      // Zapisz aktualne ID logu do zmiennej globalnej
      currentLogId = log._id;
      const messageDetails = document.getElementById('messageDetails');
      
      const authorName = users[log.authorId]?.username || log.authorTag || 'Nieznany użytkownik';
      const channelName = channels[log.channelId] ? `#${channels[log.channelId]}` : 'Nieznany kanał';
      
      const createdDate = new Date(log.createdAt).toLocaleString();
      const editedDate = log.editedAt ? new Date(log.editedAt).toLocaleString() : null;
      const deletedDate = log.deletedAt ? new Date(log.deletedAt).toLocaleString() : null;
      
      let statusHTML = '';
      if (log.deletedAt) {
        statusHTML = `<span class="badge bg-danger">Usunięta ${deletedDate}</span>`;
      } else if (log.editedAt) {
        statusHTML = `<span class="badge bg-warning text-dark">Edytowana ${editedDate}</span>`;
      } else {
        statusHTML = '<span class="badge bg-success">Normalna</span>';
      }
      
      // Zawartość podstawowa
      let contentHTML = `
        <div class="mb-3">
          <h6>Informacje podstawowe:</h6>
          <table class="table table-sm">
            <tr>
              <th style="width: 140px;">ID wiadomości:</th>
              <td>${log.messageId}</td>
            </tr>
            <tr>
              <th>Autor:</th>
              <td>${authorName} (ID: ${log.authorId})</td>
            </tr>
            <tr>
              <th>Kanał:</th>
              <td>${channelName} (ID: ${log.channelId})</td>
            </tr>
            <tr>
              <th>Data utworzenia:</th>
              <td>${createdDate}</td>
            </tr>
            <tr>
              <th>Status:</th>
              <td>${statusHTML}</td>
            </tr>
          </table>
        </div>
        
        <div class="mb-3">
          <h6>Treść wiadomości:</h6>
          <div class="p-3 bg-light border rounded">
            ${log.content ? log.content : (
              log.stickers && log.stickers.length > 0 ? '<em>Wiadomość zawiera tylko naklejkę, bez tekstu</em>' :
              log.attachments && log.attachments.length > 0 ? '<em>Wiadomość zawiera tylko załącznik, bez tekstu</em>' :
              log.embeds && log.embeds.length > 0 ? '<em>Wiadomość zawiera tylko osadzenie, bez tekstu</em>' :
              '<em>Brak treści</em>'
            )}
          </div>
        </div>
      `;
      
      // Oryginalny content jeśli edytowany
      if (log.originalContent && log.editedAt) {
        contentHTML += `
          <div class="mt-3 mb-3">
            <h6>Oryginalna treść przed edycją:</h6>
            <div class="p-2 bg-light border rounded">
              ${log.originalContent || '(Brak treści)'}
            </div>
          </div>
        `;
      }
      
      // Załączniki
      if (log.attachments && log.attachments.length > 0) {
        contentHTML += '<div class="mt-3 mb-3"><h6>Załączniki:</h6><div class="row">';
        
        log.attachments.forEach(attachment => {
          // Sprawdź, czy załącznik to obrazek
          const isImage = attachment.contentType && attachment.contentType.startsWith('image/');
          
          contentHTML += `
            <div class="col-md-6 mb-3">
              <div class="card h-100">
                <div class="card-body">
                  <h6 class="card-title">${attachment.name}</h6>
                  <p class="card-text small">
                    Typ: ${attachment.contentType || 'nieznany'}<br>
                    Rozmiar: ${attachment.size ? formatFileSize(attachment.size) : 'nieznany'}
                  </p>
                  ${isImage && attachment.url ? 
                    `<img src="${attachment.url}" alt="${attachment.name}" class="img-fluid mt-2 mb-2" style="max-height: 200px;">` : 
                    ''}
                  <a href="${attachment.url}" target="_blank" class="btn btn-sm btn-primary">
                    <i class="fas fa-external-link-alt me-1"></i> Otwórz
                  </a>
                </div>
              </div>
            </div>
          `;
        });
        
        contentHTML += '</div></div>';
      }
      
      // Naklejki
      if (log.stickers && log.stickers.length > 0) {
        contentHTML += '<div class="mt-3 mb-3"><h6>Naklejki:</h6><div class="row">';
        
        log.stickers.forEach(sticker => {
          contentHTML += `
            <div class="col-md-6 mb-3">
              <div class="card h-100">
                <div class="card-header bg-light">
                  <strong>${sticker.name}</strong>
                </div>
                <div class="card-body">
                  ${sticker.url ? 
                    `<div class="text-center mb-3">
                       <img src="${sticker.url}" alt="${sticker.name}" class="img-fluid" style="max-height: 200px;">
                     </div>` : 
                    '<div class="alert alert-warning">Podgląd niedostępny</div>'}
                  
                  <div class="table-responsive">
                    <table class="table table-sm">
                      <tr>
                        <th scope="row">ID</th>
                        <td><code>${sticker.id}</code></td>
                      </tr>
                      <tr>
                        <th scope="row">Format</th>
                        <td>${sticker.format || 'nieznany'}</td>
                      </tr>
                      ${sticker.description ? `
                      <tr>
                        <th scope="row">Opis</th>
                        <td>${sticker.description}</td>
                      </tr>` : ''}
                      ${sticker.packName ? `
                      <tr>
                        <th scope="row">Paczka</th>
                        <td>${sticker.packName} ${sticker.packId ? `<code>(${sticker.packId})</code>` : ''}</td>
                      </tr>` : ''}
                    </table>
                  </div>
                  
                  ${sticker.url ? `
                    <div class="text-center">
                      <a href="${sticker.url}" target="_blank" class="btn btn-sm btn-primary">
                        <i class="fas fa-external-link-alt me-1"></i> Otwórz obrazek
                      </a>
                    </div>` : ''}
                </div>
              </div>
            </div>
          `;
        });
        
        contentHTML += '</div></div>';
      }
      
      // GIF
      if (log.gifAttachment) {
        contentHTML += `
          <div class="mt-3 mb-3">
            <h6>GIF:</h6>
            <div class="card">
              <div class="card-body">
                <p><strong>Platforma:</strong> ${log.gifAttachment.platform}</p>
                <p><a href="${log.gifAttachment.url}" target="_blank">${log.gifAttachment.url}</a></p>
              </div>
            </div>
          </div>
        `;
      }
      
      // Reakcje
      if (log.reactions && log.reactions.length > 0) {
        contentHTML += '<div class="mt-3 mb-3"><h6>Reakcje:</h6><div class="row">';
        
        log.reactions.forEach(reaction => {
          const emojiDisplay = reaction.isCustom 
            ? `<img src="${reaction.url}" alt="${reaction.name}" height="24" class="me-1">`
            : reaction.name;
            
          contentHTML += `
            <div class="col-md-3 mb-2">
              <div class="card">
                <div class="card-body p-2 text-center">
                  <div class="mb-1">${emojiDisplay}</div>
                    <span class="badge bg-primary">${reaction.count} reakcji</span>
                      ${reaction.animated ? '<span class="badge bg-info ms-1">animowana</span>' : ''}
                      <div class="mt-2">
                    <button class="btn btn-sm btn-info me-1" 
                            onclick="checkReactionUsers('${log.guildId}', '${log.messageId}', '${reaction.name}', ${reaction.id ? `'${reaction.id}'` : 'null'})">
                      <i class="fas fa-users"></i> Użytkownicy
                    </button>
                    <button class="btn btn-sm btn-danger" 
                            onclick="removeReaction('${log.guildId}', '${log.messageId}', '${reaction.name}', ${reaction.id ? `'${reaction.id}'` : 'null'})">
                      <i class="fas fa-trash"></i> Usuń
                    </button>
                  </div>
                </div>
              </div>
            </div>
          `;
        });
        
        contentHTML += '</div></div>';
      }
      
      // Wiadomość referencyjna (odpowiedź)
      if (log.reference) {
        contentHTML += `
          <div class="mt-3 mb-3">
            <h6>Odpowiedź na wiadomość:</h6>
            <div class="card bg-light">
              <div class="card-body">
                <p><strong>Autor:</strong> ${log.reference.authorTag || 'Nieznany użytkownik'}</p>
                <p><strong>Treść:</strong> ${log.reference.content || '(Brak treści)'}</p>
                <p class="mb-0">
                  <small class="text-muted">
                    ID: ${log.reference.messageId}, 
                    Kanał: ${channels[log.reference.channelId] ? `#${channels[log.reference.channelId]}` : log.reference.channelId}
                  </small>
                </p>
              </div>
            </div>
          </div>
        `;
      }
      
      // Osadzenia (embeds)
      if (log.embeds && log.embeds.length > 0) {
        contentHTML += '<div class="mt-3 mb-3"><h6>Osadzenia:</h6>';
        
        log.embeds.forEach((embed, index) => {
          const embedColor = embed.color ? `#${embed.color.toString(16).padStart(6, '0')}` : '#cccccc';
          
          contentHTML += `
            <div class="card mb-3" style="border-left: 4px solid ${embedColor}">
              <div class="card-header">
                Osadzenie #${index + 1} - Typ: ${embed.type || 'nieznany'}
              </div>
              <div class="card-body">
                ${embed.title ? `<h5 class="card-title">${embed.title}</h5>` : ''}
                ${embed.description ? `<p class="card-text">${embed.description}</p>` : ''}
                
                ${embed.author ? `
                  <div class="d-flex align-items-center mb-2">
                    ${embed.author.iconURL ? `<img src="${embed.author.iconURL}" alt="Author icon" class="me-2" style="width: 24px; height: 24px; border-radius: 50%;">` : ''}
                    <span>${embed.author.name || 'Nieznany autor'}</span>
                  </div>
                ` : ''}
                
                ${embed.image ? `
                  <div class="mb-2">
                    <img src="${embed.image.url}" alt="Embed image" class="img-fluid" style="max-height: 300px;">
                  </div>
                ` : ''}
                
                ${embed.thumbnail ? `
                  <div class="float-end ms-3 mb-3">
                    <img src="${embed.thumbnail.url}" alt="Thumbnail" style="max-width: 100px; max-height: 100px;">
                  </div>
                ` : ''}
                
                ${embed.fields && embed.fields.length > 0 ? `
                  <div class="row mt-3">
                    ${embed.fields.map(field => `
                      <div class="col-${field.inline ? '6' : '12'} mb-2">
                        <div class="card">
                          <div class="card-header py-1 px-2 small">${field.name}</div>
                          <div class="card-body py-1 px-2 small">${field.value}</div>
                        </div>
                      </div>
                    `).join('')}
                  </div>
                ` : ''}
                
                ${embed.footer ? `
                  <div class="d-flex align-items-center mt-2 pt-2 border-top">
                    ${embed.footer.iconURL ? `<img src="${embed.footer.iconURL}" alt="Footer icon" class="me-2" style="width: 20px; height: 20px; border-radius: 50%;">` : ''}
                    <small class="text-muted">${embed.footer.text}</small>
                  </div>
                ` : ''}
                
                ${embed.timestamp ? `
                  <div class="mt-2">
                    <small class="text-muted">Timestamp: ${new Date(embed.timestamp).toLocaleString()}</small>
                  </div>
                ` : ''}
              </div>
            </div>
          `;
        });
        
        contentHTML += '</div>';
      }
      
      messageDetails.innerHTML = contentHTML;
    }
    
    // Funkcja formatująca rozmiar pliku
    function formatFileSize(bytes) {
      if (bytes === 0) return '0 B';
      
      const k = 1024;
      const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
  </script>
</body>
</html>