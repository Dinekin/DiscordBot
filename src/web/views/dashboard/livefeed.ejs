<!DOCTYPE html>
<html lang="pl">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Live Feed - <%= guild.name %></title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="/css/dark-mode.css">
  <script src="/js/saved-style.js"></script>
</head>
<body>
  <%- include('../partials/navbar') %>

  <div class="container mt-4">
    <div class="row">
      <%- include('../partials/guild-sidebar', { path: '/dashboard/guild/' + guild.id + '/livefeed' }) %>

      <div class="col-md-9">
        <div class="card shadow-sm mb-4">
          <div class="card-body">
            <div class="d-flex justify-content-between align-items-center mb-3">
              <h2 class="card-title mb-0">Harmonogramy wiadomości (Live Feed)</h2>
              <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createLiveFeedModal">
                <i class="fas fa-plus"></i> Utwórz nowy
              </button>
            </div>
            <div class="mb-3">
              <button class="btn btn-outline-secondary btn-sm" id="addCategoryBtn"><i class="fas fa-folder-plus me-1"></i> Dodaj kategorię</button>
            </div>
            <p class="card-text">
              Live Feed pozwala na automatyczne wysyłanie wiadomości zgodnie z określonym harmonogramem.
              Można ustawić wiadomości cykliczne, przypomnienia, ogłoszenia i inne komunikaty, które będą
              wysyłane automatycznie w określonych odstępach czasu.
            </p>
          </div>
        </div>

        <% if (feeds && feeds.length > 0) { %>
          <% 
            // Grupowanie feedów po kategorii
            const feedsByCategory = {};
            feeds.forEach(feed => {
              const cat = feed.category || 'Inne';
              if (!feedsByCategory[cat]) feedsByCategory[cat] = [];
              feedsByCategory[cat].push(feed);
            });
            const categories = Object.keys(feedsByCategory).sort();
          %>
          <div id="category-list">
            <% categories.forEach(category => { %>
              <div class="category-group mb-2" data-category="<%= category %>">
                <div class="d-flex align-items-center mb-1">
                  <button class="btn btn-link p-0 me-2 toggle-category" type="button" data-category="<%= category %>">
                    <i class="fas fa-chevron-down"></i>
                  </button>
                  <h5 class="mb-0 flex-grow-1" style="font-size:1.1rem;"><i class="fas fa-folder-open me-2"></i><%= category %></h5>
                  <span class="handle-category ms-2" style="cursor: grab;"><i class="fas fa-arrows-alt"></i></span>
                </div>
                <div class="category-feeds">
                  <% feedsByCategory[category].forEach(feed => { %>
                    <div class="card shadow-sm mb-2 livefeed-card">
                      <div class="card-header d-flex justify-content-between align-items-center py-2 px-3">
                        <h6 class="mb-0" style="font-size:1rem;"><%= feed.name %></h6>
                        <div class="d-flex align-items-center">
                          <span class="handle-feed me-2" style="cursor: grab;"><i class="fas fa-arrows-alt"></i></span>
                          <div class="dropdown">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" id="dropdownMenuButton-<%= feed._id %>" data-bs-toggle="dropdown" aria-expanded="false">
                              Akcje
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton-<%= feed._id %>">
                              <li><button class="dropdown-item" onclick="editFeed('<%= feed._id %>')"><i class="fas fa-edit me-2"></i>Edytuj</button></li>
                              <li><button class="dropdown-item" onclick="testFeed('<%= guild.id %>', '<%= feed._id %>')"><i class="fas fa-paper-plane me-2"></i>Testuj</button></li>
                              <% if (feed.isActive) { %>
                                <li><button class="dropdown-item" onclick="pauseFeed('<%= guild.id %>', '<%= feed._id %>')"><i class="fas fa-pause me-2"></i>Wstrzymaj</button></li>
                              <% } else { %>
                                <li><button class="dropdown-item" onclick="resumeFeed('<%= guild.id %>', '<%= feed._id %>')"><i class="fas fa-play me-2"></i>Wznów</button></li>
                              <% } %>
                              <li><hr class="dropdown-divider"></li>
                              <li><button class="dropdown-item text-danger" onclick="deleteFeed('<%= guild.id %>', '<%= feed._id %>')"><i class="fas fa-trash me-2"></i>Usuń</button></li>
                            </ul>
                          </div>
                        </div>
                      </div>
                      <div class="card-body py-2 px-3">
                        <div class="row g-1">
                          <div class="col-12 col-md-6 mb-1 mb-md-0">
                            <div class="d-flex align-items-center mb-2">
                              <label for="quickCategory-<%= feed._id %>" class="me-2 mb-0" style="font-size:0.95rem;"><i class='fas fa-folder-open me-1'></i>Kategoria:</label>
                              <select class="form-select form-select-sm quick-category-select" data-feed-id="<%= feed._id %>" id="quickCategory-<%= feed._id %>" style="width:auto; min-width:120px;"></select>
                            </div>
                            <p class="mb-1" style="font-size:0.95rem;">
                              <i class="fas fa-hashtag me-2 text-muted"></i>
                              <strong>Kanał:</strong> 
                              <% if (guild.channels.cache.get(feed.channelId)) { %>
                                <span class="text-primary">#<%= guild.channels.cache.get(feed.channelId).name %></span>
                              <% } else { %>
                                <span class="text-danger">Nieznany kanał</span>
                              <% } %>
                            </p>
                            <p class="mb-1" style="font-size:0.95rem;">
                              <i class="fas fa-calendar-alt me-2 text-muted"></i>
                              <strong>Harmonogram:</strong> 
                              <%= formatSchedule(feed.schedule) %>
                            </p>
                            <p class="mb-1" style="font-size:0.95rem;">
                              <i class="fas fa-clock me-2 text-muted"></i>
                              <strong>Ostatnie uruchomienie:</strong> 
                              <% if (feed.nextRun) { %>
                                <span title="<%= new Date(feed.nextRun).toLocaleString() %>"><%= timeAgo(feed.lastRun) %></span>
                              <% } else { %>
                                Nieznane
                              <% } %>
                            </p>
                            <p class="mb-1" style="font-size:0.95rem;">
                              <i class="fas fa-calendar-check me-2 text-muted"></i>
                              <strong>Następne uruchomienie:</strong> 
                              <% if (feed.nextRun) { %>
                                <span title="<%= new Date(feed.nextRun).toLocaleString() %>"><%= timeAgo(feed.nextRun) %></span>
                                <% if (!feed.isActive) { %>
                                  <span class="text-warning">(WSTRZYMANE)</span>
                                <% } %>
                              <% } else { %>
                                Nieznane
                              <% } %>
                            </p>
                            <p class="mb-1" style="font-size:0.95rem;">
                              <i class="fas fa-toggle-on me-2 text-muted"></i>
                              <strong>Status:</strong> 
                              <% if (feed.isActive) { %>
                                <span class="badge bg-success">Aktywny</span>
                              <% } else { %>
                                <span class="badge bg-warning text-dark">Wstrzymany</span>
                              <% } %>
                            </p>
                          </div>
                          <div class="col-12 col-md-6">
                            <div class="card bg-light mb-0" style="font-size:0.95rem;">
                              <div class="card-header py-1 px-2">
                                <strong>Treść wiadomości</strong>
                                <% if (feed.embed) { %><span class="badge bg-info ms-2">Embed</span><% } %>
                              </div>
                              <div class="card-body py-1 px-2">
                                <div style="max-height: 100px; overflow-y: auto;">
                                  <%= feed.message %>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  <% }); %>
                </div>
              </div>
            <% }); %>
          </div>
        <% } else { %>
          <div class="alert alert-info">
            <i class="fas fa-info-circle me-2"></i>
            Nie masz jeszcze żadnych harmonogramów wiadomości. Kliknij przycisk "Utwórz nowy", aby zacząć.
          </div>
        <% } %>
      </div>
    </div>
  </div>

  <!-- Modal do tworzenia nowego harmonogramu Live Feed -->
  <div class="modal fade" id="createLiveFeedModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Utwórz nowy harmonogram wiadomości</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="createLiveFeedForm">
            <div class="row mb-3">
              <div class="col-md-6">
                <label for="name" class="form-label">Nazwa harmonogramu</label>
                <input type="text" class="form-control" id="name" name="name" required>
              </div>
              <div class="col-md-6">
                <label for="channelId" class="form-label">Kanał</label>
                <select class="form-select" id="channelId" name="channelId" required>
                  <option value="">Wybierz kanał...</option>
                  <% channels.forEach(channel => { %>
                    <option value="<%= channel.id %>">#<%= channel.name %></option>
                  <% }); %>
                </select>
              </div>
            </div>
            <div class="row mb-3">
              <div class="col-md-6">
                <label for="category" class="form-label">Kategoria</label>
                <select class="form-select" id="category" name="category">
                  <option value="Ogłoszenia">Ogłoszenia</option>
                  <option value="Przypomnienia">Przypomnienia</option>
                  <option value="Cykliczne">Cykliczne</option>
                  <option value="Inne">Inne</option>
                </select>
              </div>
            </div>
            <div class="mb-3">
              <label for="message" class="form-label">Treść wiadomości</label>
              <textarea class="form-control" id="message" name="message" rows="5" required></textarea>
              <div class="form-text">Wpisz treść wiadomości, która będzie wysyłana zgodnie z harmonogramem.</div>
            </div>
            <div class="card mb-3">
              <div class="card-header">
                <h6 class="mb-0">Harmonogram</h6>
              </div>
              <div class="card-body">
                <div class="row mb-3">
                  <div class="col-md-6">
                    <label for="minute" class="form-label">Minuta (0-59)</label>
                    <input type="text" class="form-control" id="minute" name="minute" placeholder="*">
                    <div class="form-text">* dla każdej minuty, lub konkretne wartości, np. 0,15,30,45</div>
                  </div>
                  <div class="col-md-6">
                    <label for="hour" class="form-label">Godzina (0-23)</label>
                    <input type="text" class="form-control" id="hour" name="hour" placeholder="*">
                    <div class="form-text">* dla każdej godziny, lub konkretne wartości, np. 9,12,18</div>
                  </div>
                </div>
                <div class="row mb-3">
                  <div class="col-md-4">
                    <label for="day" class="form-label">Dzień miesiąca (1-31)</label>
                    <input type="text" class="form-control" id="day" name="day" placeholder="*">
                    <div class="form-text">* dla każdego dnia</div>
                  </div>
                  <div class="col-md-4">
                    <label for="month" class="form-label">Miesiąc (1-12)</label>
                    <input type="text" class="form-control" id="month" name="month" placeholder="*">
                    <div class="form-text">* dla każdego miesiąca</div>
                  </div>
                  <div class="col-md-4">
                    <label for="weekday" class="form-label">Dzień tygodnia (0-6)</label>
                    <input type="text" class="form-control" id="weekday" name="weekday" placeholder="*">
                    <div class="form-text">0=niedziela, 6=sobota, * dla każdego dnia</div>
                  </div>
                </div>
                <div id="scheduleSummary" class="alert alert-info mt-2">
                  Podgląd harmonogramu pojawi się tutaj po uzupełnieniu pól
                </div>
              </div>
            </div>
            
            <div class="card mb-3">
              <div class="card-header">
                <h6 class="mb-0">Opcje wyglądu</h6>
              </div>
              <div class="card-body">
                <div class="form-check form-switch mb-3">
                  <input class="form-check-input" type="checkbox" id="embed" name="embed">
                  <label class="form-check-label" for="embed">
                    Wysyłaj jako osadzoną wiadomość (embed)
                  </label>
                </div>
                <div class="mb-3" id="colorContainer" style="display: none;">
                  <label for="color" class="form-label">Kolor embeda</label>
                  <input type="color" class="form-control form-control-color" id="color" name="color" value="#3498db">
                </div>
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
          <button type="button" class="btn btn-primary" id="createLiveFeedButton">Utwórz</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal do edycji harmonogramu -->
  <div class="modal fade" id="editLiveFeedModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Edytuj harmonogram wiadomości</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="editLiveFeedForm">
            <input type="hidden" id="editFeedId" name="feedId">
            <div class="row mb-3">
              <div class="col-md-6">
                <label for="editName" class="form-label">Nazwa harmonogramu</label>
                <input type="text" class="form-control" id="editName" name="name" required>
              </div>
              <div class="col-md-6">
                <label for="editChannelId" class="form-label">Kanał</label>
                <select class="form-select" id="editChannelId" name="channelId" required>
                  <option value="">Wybierz kanał...</option>
                  <% channels.forEach(channel => { %>
                    <option value="<%= channel.id %>">#<%= channel.name %></option>
                  <% }); %>
                </select>
              </div>
            </div>
            <div class="row mb-3">
              <div class="col-md-6">
                <label for="editCategory" class="form-label">Kategoria</label>
                <select class="form-select" id="editCategory" name="category">
                  <option value="Ogłoszenia">Ogłoszenia</option>
                  <option value="Przypomnienia">Przypomnienia</option>
                  <option value="Cykliczne">Cykliczne</option>
                  <option value="Inne">Inne</option>
                </select>
              </div>
            </div>
            <div class="mb-3">
              <label for="editMessage" class="form-label">Treść wiadomości</label>
              <textarea class="form-control" id="editMessage" name="message" rows="5" required></textarea>
              <div class="form-text">Wpisz treść wiadomości, która będzie wysyłana zgodnie z harmonogramem.</div>
            </div>
            <div class="card mb-3">
              <div class="card-header">
                <h6 class="mb-0">Harmonogram</h6>
              </div>
              <div class="card-body">
                <div class="row mb-3">
                  <div class="col-md-6">
                    <label for="editMinute" class="form-label">Minuta (0-59)</label>
                    <input type="text" class="form-control" id="editMinute" name="minute" placeholder="*">
                    <div class="form-text">* dla każdej minuty, lub konkretne wartości, np. 0,15,30,45</div>
                  </div>
                  <div class="col-md-6">
                    <label for="editHour" class="form-label">Godzina (0-23)</label>
                    <input type="text" class="form-control" id="editHour" name="hour" placeholder="*">
                    <div class="form-text">* dla każdej godziny, lub konkretne wartości, np. 9,12,18</div>
                  </div>
                </div>
                <div class="row mb-3">
                  <div class="col-md-4">
                    <label for="editDay" class="form-label">Dzień miesiąca (1-31)</label>
                    <input type="text" class="form-control" id="editDay" name="day" placeholder="*">
                    <div class="form-text">* dla każdego dnia</div>
                  </div>
                  <div class="col-md-4">
                    <label for="editMonth" class="form-label">Miesiąc (1-12)</label>
                    <input type="text" class="form-control" id="editMonth" name="month" placeholder="*">
                    <div class="form-text">* dla każdego miesiąca</div>
                  </div>
                  <div class="col-md-4">
                    <label for="editWeekday" class="form-label">Dzień tygodnia (0-6)</label>
                    <input type="text" class="form-control" id="editWeekday" name="weekday" placeholder="*">
                    <div class="form-text">0=niedziela, 6=sobota, * dla każdego dnia</div>
                  </div>
                </div>
                <div id="editScheduleSummary" class="alert alert-info mt-2">
                  Podgląd harmonogramu pojawi się tutaj po uzupełnieniu pól
                </div>
              </div>
            </div>
            
            <div class="card mb-3">
              <div class="card-header">
                <h6 class="mb-0">Opcje wyglądu</h6>
              </div>
              <div class="card-body">
                <div class="form-check form-switch mb-3">
                  <input class="form-check-input" type="checkbox" id="editEmbed" name="embed">
                  <label class="form-check-label" for="editEmbed">
                    Wysyłaj jako osadzoną wiadomość (embed)
                  </label>
                </div>
                <div class="mb-3" id="editColorContainer" style="display: none;">
                  <label for="editColor" class="form-label">Kolor embeda</label>
                  <input type="color" class="form-control form-control-color" id="editColor" name="color" value="#3498db">
                </div>
              </div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
          <button type="button" class="btn btn-primary" id="updateLiveFeedButton">Zapisz zmiany</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Modal dodawania kategorii -->
  <div class="modal fade" id="addCategoryModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Dodaj kategorię</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <input type="text" class="form-control" id="newCategoryName" placeholder="Nazwa kategorii">
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Anuluj</button>
          <button type="button" class="btn btn-primary" id="saveCategoryBtn">Dodaj</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
  <script src="/js/dark-mode.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.15.0/Sortable.min.js"></script>
  
  <script>
    // Funkcje obsługi modalu dla Embed
    document.getElementById('embed').addEventListener('change', function() {
      const colorContainer = document.getElementById('colorContainer');
      colorContainer.style.display = this.checked ? 'block' : 'none';
    });

    document.getElementById('editEmbed').addEventListener('change', function() {
      const colorContainer = document.getElementById('editColorContainer');
      colorContainer.style.display = this.checked ? 'block' : 'none';
    });

    // Aktualizacja podglądu harmonogramu
    function updateScheduleSummary() {
      const minute = document.getElementById('minute').value || '*';
      const hour = document.getElementById('hour').value || '*';
      const day = document.getElementById('day').value || '*';
      const month = document.getElementById('month').value || '*';
      const weekday = document.getElementById('weekday').value || '*';
      
      const summary = `Harmonogram: ${minute} ${hour} ${day} ${month} ${weekday} (format cron)`;
      document.getElementById('scheduleSummary').innerText = summary;
    }

    function updateEditScheduleSummary() {
      const minute = document.getElementById('editMinute').value || '*';
      const hour = document.getElementById('editHour').value || '*';
      const day = document.getElementById('editDay').value || '*';
      const month = document.getElementById('editMonth').value || '*';
      const weekday = document.getElementById('editWeekday').value || '*';
      
      const summary = `Harmonogram: ${minute} ${hour} ${day} ${month} ${weekday} (format cron)`;
      document.getElementById('editScheduleSummary').innerText = summary;
    }

    // Dodaj nasłuchiwanie na zmiany w polach harmonogramu
    ['minute', 'hour', 'day', 'month', 'weekday'].forEach(id => {
      document.getElementById(id).addEventListener('input', updateScheduleSummary);
    });

    ['editMinute', 'editHour', 'editDay', 'editMonth', 'editWeekday'].forEach(id => {
      document.getElementById(id).addEventListener('input', updateEditScheduleSummary);
    });

    // Funkcja tworzenia nowego Live Feed
    document.getElementById('createLiveFeedButton').addEventListener('click', function() {
      createLiveFeed('<%= guild.id %>');
    });

    // Funkcja aktualizacji istniejącego Live Feed
    document.getElementById('updateLiveFeedButton').addEventListener('click', function() {
      updateLiveFeed('<%= guild.id %>');
    });

    async function createLiveFeed(guildId) {
      const form = document.getElementById('createLiveFeedForm');
      const formData = new FormData(form);
      
      const data = {
        name: formData.get('name'),
        channelId: formData.get('channelId'),
        message: formData.get('message'),
        minute: formData.get('minute') || '*',
        hour: formData.get('hour') || '*',
        day: formData.get('day') || '*',
        month: formData.get('month') || '*',
        weekday: formData.get('weekday') || '*',
        embed: formData.get('embed') ? true : false,
        color: formData.get('color') || '#3498db',
        category: formData.get('category') || 'Inne'
      };
      
      try {
        const response = await fetch(`/api/guilds/${guildId}/livefeeds`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Zamknij modal i odśwież stronę
          const modal = bootstrap.Modal.getInstance(document.getElementById('createLiveFeedModal'));
          modal.hide();
          location.reload();
        } else {
          alert(`Błąd: ${result.error}`);
        }
      } catch (error) {
        console.error('Błąd podczas tworzenia Live Feed:', error);
        alert('Wystąpił błąd podczas tworzenia harmonogramu.');
      }
    }

    async function editFeed(feedId) {
      try {
        const response = await fetch(`/api/guilds/<%= guild.id %>/livefeeds/${feedId}`);
        const result = await response.json();
        
        if (result.success) {
          const feed = result.feed;
          
          // Wypełnij formularz danymi
          document.getElementById('editFeedId').value = feed._id;
          document.getElementById('editName').value = feed.name;
          document.getElementById('editChannelId').value = feed.channelId;
          document.getElementById('editMessage').value = feed.message;
          document.getElementById('editMinute').value = feed.schedule.minute || '*';
          document.getElementById('editHour').value = feed.schedule.hour || '*';
          document.getElementById('editDay').value = feed.schedule.dayOfMonth || '*';
          document.getElementById('editMonth').value = feed.schedule.month || '*';
          document.getElementById('editWeekday').value = feed.schedule.dayOfWeek || '*';
          document.getElementById('editEmbed').checked = feed.embed;
          document.getElementById('editColor').value = feed.embedColor || '#3498db';
          document.getElementById('editCategory').value = feed.category || 'Inne';
          
          // Pokaż/ukryj pole koloru
          document.getElementById('editColorContainer').style.display = feed.embed ? 'block' : 'none';
          
          // Aktualizuj podgląd harmonogramu
          updateEditScheduleSummary();
          
          // Otwórz modal
          const modal = new bootstrap.Modal(document.getElementById('editLiveFeedModal'));
          modal.show();
        } else {
          alert(`Błąd: ${result.error}`);
        }
      } catch (error) {
        console.error('Błąd podczas pobierania danych Live Feed:', error);
        alert('Wystąpił błąd podczas pobierania danych harmonogramu.');
      }
    }

    async function updateLiveFeed(guildId) {
      const form = document.getElementById('editLiveFeedForm');
      const formData = new FormData(form);
      const feedId = formData.get('feedId');
      
      const data = {
        name: formData.get('name'),
        channelId: formData.get('channelId'),
        message: formData.get('message'),
        minute: formData.get('minute') || '*',
        hour: formData.get('hour') || '*',
        day: formData.get('day') || '*',
        month: formData.get('month') || '*',
        weekday: formData.get('weekday') || '*',
        embed: formData.get('embed') ? true : false,
        color: formData.get('color') || '#3498db',
        category: formData.get('category') || 'Inne'
      };
      
      try {
        const response = await fetch(`/api/guilds/${guildId}/livefeeds/${feedId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Zamknij modal i odśwież stronę
          const modal = bootstrap.Modal.getInstance(document.getElementById('editLiveFeedModal'));
          modal.hide();
          location.reload();
        } else {
          alert(`Błąd: ${result.error}`);
        }
      } catch (error) {
        console.error('Błąd podczas aktualizacji Live Feed:', error);
        alert('Wystąpił błąd podczas aktualizacji harmonogramu.');
      }
    }

    async function testFeed(guildId, feedId) {
      try {
        const response = await fetch(`/api/guilds/${guildId}/livefeeds/${feedId}/test`, {
          method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
          alert('Testowa wiadomość została wysłana!');
        } else {
          alert(`Błąd: ${result.error}`);
        }
      } catch (error) {
        console.error('Błąd podczas testowania Live Feed:', error);
        alert('Wystąpił błąd podczas testowania harmonogramu.');
      }
    }

    async function pauseFeed(guildId, feedId) {
      try {
        const response = await fetch(`/api/guilds/${guildId}/livefeeds/${feedId}/pause`, {
          method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
          location.reload();
        } else {
          alert(`Błąd: ${result.error}`);
        }
      } catch (error) {
        console.error('Błąd podczas wstrzymywania Live Feed:', error);
        alert('Wystąpił błąd podczas wstrzymywania harmonogramu.');
      }
    }

    async function resumeFeed(guildId, feedId) {
      try {
        const response = await fetch(`/api/guilds/${guildId}/livefeeds/${feedId}/resume`, {
          method: 'POST'
        });
        
        const result = await response.json();
        
        if (result.success) {
          location.reload();
        } else {
          alert(`Błąd: ${result.error}`);
        }
      } catch (error) {
        console.error('Błąd podczas wznawiania Live Feed:', error);
        alert('Wystąpił błąd podczas wznawiania harmonogramu.');
      }
    }

    async function deleteFeed(guildId, feedId) {
      if (!confirm('Czy na pewno chcesz usunąć ten harmonogram wiadomości?')) {
        return;
      }
      
      try {
        const response = await fetch(`/api/guilds/${guildId}/livefeeds/${feedId}`, {
          method: 'DELETE'
        });
        
        const result = await response.json();
        
        if (result.success) {
          location.reload();
        } else {
          alert(`Błąd: ${result.error}`);
        }
      } catch (error) {
        console.error('Błąd podczas usuwania Live Feed:', error);
        alert('Wystąpił błąd podczas usuwania harmonogramu.');
      }
    }

    // Inicjalizacja
    document.addEventListener('DOMContentLoaded', function() {
      updateScheduleSummary();
    });

    // Zwijanie/rozwijanie kategorii
    document.querySelectorAll('.toggle-category').forEach(btn => {
      btn.addEventListener('click', function() {
        const cat = this.getAttribute('data-category');
        const group = document.querySelector('.category-group[data-category="' + cat + '"]');
        const feeds = group.querySelector('.category-feeds');
        const icon = this.querySelector('i');
        if (feeds.style.display === 'none') {
          feeds.style.display = '';
          icon.classList.remove('fa-chevron-right');
          icon.classList.add('fa-chevron-down');
        } else {
          feeds.style.display = 'none';
          icon.classList.remove('fa-chevron-down');
          icon.classList.add('fa-chevron-right');
        }
        saveLayoutToServer();
      });
    });

    // Przeciąganie/przesuwanie kategorii
    const categoryList = document.getElementById('category-list');
    Sortable.create(categoryList, {
      handle: '.handle-category',
      animation: 150,
      draggable: '.category-group',
      onEnd: function (evt) {
        saveLayoutToServer();
      }
    });

    // Przeciąganie/przesuwanie livefeedów między kategoriami
    // Dodaj Sortable do każdej listy feedów

    document.querySelectorAll('.category-feeds').forEach(feedList => {
      Sortable.create(feedList, {
        group: 'feeds',
        animation: 150,
        draggable: '.livefeed-card',
        handle: '.handle-feed',
        onEnd: async function (evt) {
          const feedCard = evt.item;
          const dropdown = feedCard.querySelector('.dropdown-toggle');
          if (!dropdown) return;
          const feedId = dropdown.id.replace('dropdownMenuButton-', '');
          const newCategory = feedCard.closest('.category-group').getAttribute('data-category');
          try {
            const response = await fetch(`/api/guilds/<%= guild.id %>/livefeeds/${feedId}/category`, {
              method: 'PUT',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ category: newCategory })
            });
            const result = await response.json();
            if (!result.success) {
              alert('Błąd przy zmianie kategorii: ' + result.error);
              location.reload();
            } else {
              saveLayoutToServer();
            }
          } catch (e) {
            alert('Błąd sieci przy zmianie kategorii');
            location.reload();
          }
        }
      });
    });

    // Zarządzanie kategoriami
    let livefeedCategories = [];
    let livefeedLayout = { categoryOrder: [], feedOrder: {}, categoryCollapse: {} };

    async function fetchCategories() {
      const res = await fetch(`/api/guilds/<%= guild.id %>/livefeed-categories`);
      const data = await res.json();
      if (data.success) {
        livefeedCategories = data.categories;
        updateCategorySelects();
        renderCategoryListUI();
      }
    }

    function updateCategorySelects() {
      const selects = [document.getElementById('category'), document.getElementById('editCategory')];
      selects.forEach(sel => {
        if (!sel) return;
        sel.innerHTML = '';
        livefeedCategories.forEach(cat => {
          const opt = document.createElement('option');
          opt.value = cat;
          opt.textContent = cat;
          sel.appendChild(opt);
        });
      });
      // Szybka zmiana kategorii na kartach
      document.querySelectorAll('.quick-category-select').forEach(sel => {
        const feedId = sel.getAttribute('data-feed-id');
        const current = sel.getAttribute('data-current');
        sel.innerHTML = '';
        livefeedCategories.forEach(cat => {
          const opt = document.createElement('option');
          opt.value = cat;
          opt.textContent = cat;
          if (cat === current) opt.selected = true;
          sel.appendChild(opt);
        });
      });
    }

    function renderCategoryListUI() {
      // Dodaj przycisk usuwania do każdej kategorii oprócz 'Inne'
      document.querySelectorAll('.category-group').forEach(group => {
        const cat = group.getAttribute('data-category');
        let delBtn = group.querySelector('.delete-category-btn');
        if (cat !== 'Inne' && !delBtn) {
          const btn = document.createElement('button');
          btn.className = 'btn btn-sm btn-danger ms-2 delete-category-btn';
          btn.innerHTML = '<i class="fas fa-trash"></i>';
          btn.onclick = () => deleteCategory(cat);
          group.querySelector('.d-flex.align-items-center').appendChild(btn);
        }
        if (cat === 'Inne' && delBtn) delBtn.remove();
      });
      setQuickCategoryValues();
      updateCategorySelects();
    }

    document.getElementById('addCategoryBtn').addEventListener('click', function() {
      document.getElementById('newCategoryName').value = '';
      const modal = new bootstrap.Modal(document.getElementById('addCategoryModal'));
      modal.show();
    });

    document.getElementById('saveCategoryBtn').addEventListener('click', async function() {
      const name = document.getElementById('newCategoryName').value.trim();
      if (!name) return alert('Podaj nazwę kategorii!');
      const res = await fetch(`/api/guilds/<%= guild.id %>/livefeed-categories`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name })
      });
      const data = await res.json();
      if (data.success) {
        bootstrap.Modal.getInstance(document.getElementById('addCategoryModal')).hide();
        await fetchCategories();
      } else {
        alert('Błąd: ' + data.error);
      }
    });

    async function deleteCategory(cat) {
      if (!confirm(`Czy na pewno chcesz usunąć kategorię "${cat}"? Wszystkie feedy z tej kategorii zostaną przeniesione do "Inne".`)) return;
      const res = await fetch(`/api/guilds/<%= guild.id %>/livefeed-categories/${encodeURIComponent(cat)}`, {
        method: 'DELETE'
      });
      const data = await res.json();
      if (data.success) {
        await fetchCategories();
        location.reload();
      } else {
        alert('Błąd: ' + data.error);
      }
    }

    document.addEventListener('DOMContentLoaded', fetchCategories);

    function setQuickCategoryValues() {
      document.querySelectorAll('.quick-category-select').forEach(sel => {
        const feedId = sel.getAttribute('data-feed-id');
        const card = sel.closest('.livefeed-card');
        if (card) {
          const cat = card.closest('.category-group').getAttribute('data-category');
          sel.setAttribute('data-current', cat);
        }
      });
    }

    document.addEventListener('change', async function(e) {
      if (e.target.classList.contains('quick-category-select')) {
        const feedId = e.target.getAttribute('data-feed-id');
        const newCategory = e.target.value;
        const res = await fetch(`/api/guilds/<%= guild.id %>/livefeeds/${feedId}/category`, {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ category: newCategory })
        });
        const data = await res.json();
        if (!data.success) {
          alert('Błąd przy zmianie kategorii: ' + data.error);
          location.reload();
        } else {
          // Przenieś kartę do nowej kategorii w DOM
          const card = e.target.closest('.livefeed-card');
          const oldGroup = card.closest('.category-group');
          const newGroupFeeds = document.querySelector(`.category-group[data-category='${CSS.escape(newCategory)}'] .category-feeds`);
          if (newGroupFeeds) {
            newGroupFeeds.appendChild(card);
            // Jeśli stara kategoria jest pusta, możesz ją ukryć lub pokazać info
            if (oldGroup.querySelectorAll('.livefeed-card').length === 0) {
              // Możesz np. dodać info lub ukryć całą kategorię
            }
          }
          // Zaktualizuj atrybut data-current
          e.target.setAttribute('data-current', newCategory);
          // Efekt potwierdzenia
          e.target.classList.add('border-success');
          setTimeout(() => e.target.classList.remove('border-success'), 800);
        }
      }
    });

    async function fetchLayout() {
      const res = await fetch(`/api/guilds/<%= guild.id %>/livefeed-layout`);
      const data = await res.json();
      if (data.success) {
        livefeedLayout = data;
      }
    }

    function getCurrentLayoutFromDOM() {
      const categoryOrder = Array.from(document.querySelectorAll('.category-group')).map(g => g.getAttribute('data-category'));
      const feedOrder = {};
      categoryOrder.forEach(cat => {
        const group = document.querySelector(`.category-group[data-category='${CSS.escape(cat)}'] .category-feeds`);
        if (group) {
          feedOrder[cat] = Array.from(group.querySelectorAll('.livefeed-card')).map(card => {
            const dropdown = card.querySelector('.dropdown-toggle');
            return dropdown ? dropdown.id.replace('dropdownMenuButton-', '') : null;
          }).filter(Boolean);
        }
      });
      const categoryCollapse = {};
      categoryOrder.forEach(cat => {
        const group = document.querySelector(`.category-group[data-category='${CSS.escape(cat)}']`);
        if (group) {
          const feeds = group.querySelector('.category-feeds');
          categoryCollapse[cat] = feeds.style.display === 'none';
        }
      });
      return { categoryOrder, feedOrder, categoryCollapse };
    }

    async function saveLayoutToServer() {
      const layout = getCurrentLayoutFromDOM();
      await fetch(`/api/guilds/<%= guild.id %>/livefeed-layout`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(layout)
      });
    }

    function applyLayoutToDOM() {
      // Kolejność kategorii
      if (livefeedLayout.categoryOrder && livefeedLayout.categoryOrder.length) {
        const catList = document.getElementById('category-list');
        livefeedLayout.categoryOrder.forEach(cat => {
          const group = catList.querySelector(`.category-group[data-category='${CSS.escape(cat)}']`);
          if (group) catList.appendChild(group);
        });
      }
      // Kolejność feedów
      if (livefeedLayout.feedOrder) {
        Object.entries(livefeedLayout.feedOrder).forEach(([cat, feedIds]) => {
          const group = document.querySelector(`.category-group[data-category='${CSS.escape(cat)}'] .category-feeds`);
          if (group && Array.isArray(feedIds)) {
            feedIds.forEach(fid => {
              const card = group.querySelector(`.livefeed-card .dropdown-toggle[id='dropdownMenuButton-${fid}']`);
              if (card) group.appendChild(card.closest('.livefeed-card'));
            });
          }
        });
      }
      // Stan rozwinięcia/zwiniecia
      if (livefeedLayout.categoryCollapse) {
        Object.entries(livefeedLayout.categoryCollapse).forEach(([cat, collapsed]) => {
          const group = document.querySelector(`.category-group[data-category='${CSS.escape(cat)}']`);
          if (group) {
            const feeds = group.querySelector('.category-feeds');
            const icon = group.querySelector('.toggle-category i');
            if (collapsed) {
              feeds.style.display = 'none';
              if (icon) { icon.classList.remove('fa-chevron-down'); icon.classList.add('fa-chevron-right'); }
            } else {
              feeds.style.display = '';
              if (icon) { icon.classList.remove('fa-chevron-right'); icon.classList.add('fa-chevron-down'); }
            }
          }
        });
      }
    }

    // --- Przy starcie ---
    document.addEventListener('DOMContentLoaded', async function() {
      await fetchCategories();
      await fetchLayout();
      applyLayoutToDOM();
    });
  </script>
  <style>
    @media (max-width: 768px) {
      .livefeed-card .card-header, .livefeed-card .card-body {
        padding-left: 0.5rem !important;
        padding-right: 0.5rem !important;
      }
      .livefeed-card .card-header h6 {
        font-size: 0.95rem !important;
      }
      .livefeed-card .card-body {
        font-size: 0.9rem !important;
      }
    }
    .livefeed-card.sortable-chosen {
      background: #e9ecef;
      opacity: 0.8;
    }
  </style>
</body>
</html>