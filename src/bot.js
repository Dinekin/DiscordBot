const { Client, GatewayIntentBits, Partials, Collection } = require('discord.js');
const fs = require('fs');
const path = require('path');
const { connectToDatabase } = require('./utils/database');
const { setupGiveawaysManager } = require('./utils/giveawayManager');
const logger = require('./utils/logger');
const { startExpiredRoleChecker, getExpiredRoleCheckerStatus } = require('./utils/checkExpiredRoles');
const { LiveFeedManager } = require('./utils/liveFeedManager');
const { startReminderChecker, getReminderCheckerStatus, cleanupOldReminders } = require('./utils/reminderChecker');

// Konfiguracja klienta Discord z odpowiednimi uprawnieniami
const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.GuildMessageReactions,
    GatewayIntentBits.MessageContent, // Potrzebne do logowania wiadomo≈õci
    GatewayIntentBits.GuildMembers // Potrzebne do wydarze≈Ñ cz≈Çonk√≥w serwera
  ],
  partials: [
    Partials.Message,
    Partials.Channel,
    Partials.Reaction,
    Partials.User,
    Partials.GuildMember
  ]
});

// Kolekcje komend i cooldown√≥w
client.commands = new Collection();
client.cooldowns = new Collection();

// Zmienne do przechowywania interval√≥w
let expiredRoleCheckerInterval = null;
let reminderCheckerInterval = null;

// Funkcja do ≈Çadowania komend
function loadCommands() {
  const commandsPath = path.join(__dirname, 'commands');
  
  if (!fs.existsSync(commandsPath)) {
    logger.error(`Katalog komend nie istnieje: ${commandsPath}`);
    return;
  }
  
  const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));
  logger.info(`Znaleziono ${commandFiles.length} plik√≥w komend`);
  
  for (const file of commandFiles) {
    const filePath = path.join(commandsPath, file);
    try {
      const command = require(filePath);
      
      if ('data' in command && 'execute' in command) {
        client.commands.set(command.data.name, command);
        logger.info(`Za≈Çadowano komendƒô: ${command.data.name}`);
      } else {
        logger.warn(`Komenda w ${filePath} nie posiada wymaganego "data" lub "execute"`);
      }
    } catch (error) {
      logger.error(`B≈ÇƒÖd podczas ≈Çadowania komendy ${file}: ${error.stack}`);
    }
  }
}

// Funkcja do ≈Çadowania event√≥w
function loadEvents() {
  const eventsPath = path.join(__dirname, 'events');
  
  if (!fs.existsSync(eventsPath)) {
    logger.error(`Katalog event√≥w nie istnieje: ${eventsPath}`);
    return;
  }
  
  const eventFiles = fs.readdirSync(eventsPath).filter(file => file.endsWith('.js'));
  logger.info(`Znaleziono ${eventFiles.length} plik√≥w event√≥w`);
  
  for (const file of eventFiles) {
    const filePath = path.join(eventsPath, file);
    try {
      const event = require(filePath);
      
      if (!event.name) {
        logger.warn(`Event w ${filePath} nie posiada w≈Ça≈õciwo≈õci "name"`);
        continue;
      }
      
      if (event.once) {
        client.once(event.name, (...args) => event.execute(...args, client));
      } else {
        client.on(event.name, (...args) => event.execute(...args, client));
      }
      
      logger.info(`Za≈Çadowano event: ${event.name}`);
    } catch (error) {
      logger.error(`B≈ÇƒÖd podczas ≈Çadowania eventu ${file}: ${error.stack}`);
    }
  }
}

// Obs≈Çuga b≈Çƒôd√≥w niekrytycznych
client.on('warn', warn => {
  logger.warn(`Ostrze≈ºenie Discord: ${warn}`);
});

// Obs≈Çuga b≈Çƒôd√≥w
client.on('error', error => {
  logger.error(`B≈ÇƒÖd Discord: ${error.message}`);
});

// Funkcja diagnostyczna do sprawdzenia zarejestrowanych listener√≥w
function listRegisteredEvents() {
  const events = client.eventNames();
  logger.info(`Bot ma zarejestrowanych ${events.length} listener√≥w zdarze≈Ñ:`);
  events.forEach(event => {
    const listenerCount = client.listenerCount(event);
    logger.info(`- ${event}: ${listenerCount} listener(s)`);
  });
}

// G≈Ç√≥wna funkcja startowa
async function startBot() {
  try {
    // Po≈ÇƒÖczenie z bazƒÖ danych
    await connectToDatabase();
    
    // ≈Åadowanie komend i event√≥w
    loadCommands();
    loadEvents();
    // Lista zarejestrowanych listener√≥w po za≈Çadowaniu
    listRegisteredEvents();
    
    // Logowanie do Discord
    logger.info('≈ÅƒÖczenie z API Discorda...');
    await client.login(process.env.DISCORD_TOKEN);
    
    // Inicjalizacja managera giveaway po zalogowaniu do Discorda
    client.giveawaysManager = setupGiveawaysManager(client);
    logger.info('Mened≈ºer giveaway zosta≈Ç zainicjalizowany');

    // Inicjalizacja Live Feed Manager
    client.liveFeedManager = await new LiveFeedManager(client).init();
    logger.info('Mened≈ºer Live Feed zosta≈Ç zainicjalizowany');
    
    // Uruchomienie automatycznego sprawdzania wygas≈Çych r√≥l czasowych
    logger.info('üöÄ Inicjalizacja systemu r√≥l czasowych...');
    expiredRoleCheckerInterval = startExpiredRoleChecker(client, 1); // sprawdzaj co 1 minutƒô
    
    // Uruchomienie automatycznego sprawdzania przypomnie≈Ñ
    logger.info('üöÄ Inicjalizacja systemu przypomnie≈Ñ...');
    reminderCheckerInterval = startReminderChecker(client, 1); // sprawdzaj co 1 minutƒô
    
    // Sprawd≈∫ czy systemy siƒô uruchomi≈Çy
    setTimeout(() => {
      const roleStatus = getExpiredRoleCheckerStatus();
      const reminderStatus = getReminderCheckerStatus();
      
      if (roleStatus.isRunning) {
        logger.info('‚úÖ System r√≥l czasowych zosta≈Ç pomy≈õlnie uruchomiony (sprawdzanie co 1 minutƒô)');
      } else {
        logger.error('‚ùå B≈ÅƒÑD: System r√≥l czasowych nie zosta≈Ç uruchomiony!');
      }
      
      if (reminderStatus.isRunning) {
        logger.info('‚úÖ System przypomnie≈Ñ zosta≈Ç pomy≈õlnie uruchomiony (sprawdzanie co 1 minutƒô)');
      } else {
        logger.error('‚ùå B≈ÅƒÑD: System przypomnie≈Ñ nie zosta≈Ç uruchomiony!');
      }
    }, 5000);
    
    // Uruchom czyszczenie starych przypomnie≈Ñ raz dziennie
    setInterval(async () => {
      try {
        const cleaned = await cleanupOldReminders(30); // Usu≈Ñ przypomnienia starsze ni≈º 30 dni
        if (cleaned > 0) {
          logger.info(`üßπ Wyczyszczono ${cleaned} starych przypomnie≈Ñ`);
        }
      } catch (error) {
        logger.error(`‚ùå B≈ÇƒÖd podczas czyszczenia starych przypomnie≈Ñ: ${error.message}`);
      }
    }, 24 * 60 * 60 * 1000); // 24 godziny
    
    logger.info(`Bot zosta≈Ç uruchomiony pomy≈õlnie i obs≈Çuguje ${client.guilds.cache.size} serwer√≥w`);
  } catch (error) {
    logger.error(`B≈ÇƒÖd podczas uruchamiania bota: ${error.stack}`);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGINT', () => {
  logger.info('Otrzymano sygna≈Ç SIGINT, zamykanie bota...');
  
  // Zatrzymaj sprawdzanie wygas≈Çych r√≥l
  if (expiredRoleCheckerInterval) {
    clearInterval(expiredRoleCheckerInterval);
    logger.info('Zatrzymano sprawdzanie wygas≈Çych r√≥l');
  }
  
  // Zatrzymaj sprawdzanie przypomnie≈Ñ
  if (reminderCheckerInterval) {
    clearInterval(reminderCheckerInterval);
    logger.info('Zatrzymano sprawdzanie przypomnie≈Ñ');
  }
  
  // Zatrzymaj Live Feed Manager
  if (client.liveFeedManager) {
    client.liveFeedManager.stopFeedChecker();
  }
  
  // Zamknij po≈ÇƒÖczenie z Discord
  client.destroy();
  
  logger.info('Bot zosta≈Ç zamkniƒôty');
  process.exit(0);
});

process.on('SIGTERM', () => {
  logger.info('Otrzymano sygna≈Ç SIGTERM, zamykanie bota...');
  
  // Zatrzymaj sprawdzanie wygas≈Çych r√≥l
  if (expiredRoleCheckerInterval) {
    clearInterval(expiredRoleCheckerInterval);
    logger.info('Zatrzymano sprawdzanie wygas≈Çych r√≥l');
  }
  
  // Zatrzymaj sprawdzanie przypomnie≈Ñ
  if (reminderCheckerInterval) {
    clearInterval(reminderCheckerInterval);
    logger.info('Zatrzymano sprawdzanie przypomnie≈Ñ');
  }
  
  // Zatrzymaj Live Feed Manager
  if (client.liveFeedManager) {
    client.liveFeedManager.stopFeedChecker();
  }
  
  // Zamknij po≈ÇƒÖczenie z Discord
  client.destroy();
  
  logger.info('Bot zosta≈Ç zamkniƒôty');
  process.exit(0);
});

module.exports = { startBot, client };